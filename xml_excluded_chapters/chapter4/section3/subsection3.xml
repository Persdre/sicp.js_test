    <SUBSECTION>
      <NAME>
  Implementing the <SCHEMEINLINE>Amb</SCHEMEINLINE> Evaluator
      </NAME>

      <LABEL NAME="sec:amb-implementation"/>
      <INDEX>nondeterministic evaluator|(</INDEX>

      <TEXT>
  The evaluation of an ordinary Scheme expression may return a value,
  may never terminate, or may signal an error.  In nondeterministic
  Scheme the evaluation of an expression may in addition result in the
  discovery of a dead end, in which case evaluation must backtrack to a previous
  choice point.  The interpretation of nondeterministic Scheme is
  complicated by this extra case.
      </TEXT>

      <TEXT>
  <INDEX>analyzing evaluator<SUBINDEX>as basis for nondeterministic evaluator</SUBINDEX></INDEX>
  We will construct the <SCHEMEINLINE>amb</SCHEMEINLINE> evaluator for nondeterministic Scheme
  by modifying the analyzing evaluator of section<SPACE/><REF NAME="sec:separating-analysis"/>.<FOOTNOTE>We chose to implement the lazy evaluator in
    section<SPACE/><REF NAME="sec:lazy-evaluation"/> as a modification of the ordinary
    metacircular evaluator of section<SPACE/><REF NAME="sec:core-of-evaluator"/>.  In
    contrast, we will base the <SCHEMEINLINE>amb</SCHEMEINLINE> evaluator on the analyzing evaluator
    of section<SPACE/><REF NAME="sec:separating-analysis"/>, because the execution
    <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
    in that evaluator provide a convenient framework for implementing
    backtracking.</FOOTNOTE>
  As in the analyzing evaluator, evaluation of an expression is
  accomplished by calling an 
  <INDEX>execution
    <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE><SUBINDEX>in nondeterministic evaluator</SUBINDEX></INDEX>
  execution
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  produced by analysis of
  that expression.  The difference between the interpretation of ordinary
  Scheme and the interpretation of nondeterministic Scheme will be entirely
  in the execution
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>.
      </TEXT>

      <SUBHEADING>
  <NAME>Execution
    <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
    and continuations</NAME>
      </SUBHEADING>

      <INDEX>continuation<SUBINDEX>in nondeterministic evaluator|(</SUBINDEX></INDEX>
      <TEXT>
  <INDEX>execution
    <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE><SUBINDEX>in nondeterministic evaluator</SUBINDEX></INDEX>
  Recall that the execution
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
  for the ordinary evaluator take
  one argument: the environment of execution.  In contrast, the
  execution
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
  in the <SCHEMEINLINE>amb</SCHEMEINLINE> evaluator take three arguments:
  the environment, and two
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
  called <EM>continuation
    <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE></EM>.  The evaluation of an expression will finish by calling
  one of these two continuations: If the evaluation results in a value,
  the 
  <INDEX>success continuation (nondeterministic evaluator)</INDEX>
  <EM>success continuation</EM> is called with that value; if the
  evaluation results in the discovery of a dead end, the 
  <INDEX>failure continuation (nondeterministic evaluator)</INDEX>
  <EM>failure
    continuation</EM> is called.  Constructing and calling appropriate
  continuations is the mechanism by which the nondeterministic evaluator
  implements backtracking.
      </TEXT>

      <TEXT>
  It is the job of the success continuation to receive a value and
  proceed with the computation.  Along with that value, the success
  continuation is passed another failure continuation, which is to be
  called subsequently if the use of that value leads to a dead end.
      </TEXT>

      <TEXT>
  It is the job of the failure continuation to try another branch of the
  nondeterministic process.  The essence of the nondeterministic
  language is in the fact that expressions may represent choices among
  alternatives.  The evaluation of such an expression must proceed with
  one of the indicated alternative choices, even though it is not known
  in advance which choices will lead to acceptable results.  To deal
  with this, the evaluator picks one of the alternatives and passes this
  value to the success continuation.  Together with this value, the
  evaluator constructs and passes along a failure continuation that can
  be called later to choose a different alternative.
      </TEXT>

      <TEXT>
  A failure is triggered during evaluation (that is, a failure
  continuation is called) when a user program explicitly rejects the
  current line of attack (for example, a call to <SCHEMEINLINE>require</SCHEMEINLINE> may
  result in execution of <SPLITINLINE><SCHEME><SCHEMEINLINE>(amb)</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>???</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>, an expression that always
  fails<EMDASH/>see section<SPACE/><REF NAME="sec:amb"/>).  The failure continuation in hand
  at that point will cause the most recent choice point to choose
  another alternative.  If there are no more alternatives to be
  considered at that choice point, a failure at an earlier choice point
  is triggered, and so on.  Failure continuations are also invoked by
  the driver loop in response to a <SCHEMEINLINE>try-again</SCHEMEINLINE> request, to find
  another value of the expression.
      </TEXT>

      <TEXT>
  In addition, if a side-effect operation (such as assignment to a
  variable) occurs on a branch of the process resulting from a choice,
  it may be necessary, when the process finds a dead end, to undo the
  side effect before making a new choice.  This is accomplished by
  having the side-effect operation produce a failure continuation that
  undoes the side effect and propagates the failure.
      </TEXT>

      <TEXT>
  In summary, failure continuations are constructed by
  <UL>
    <LI><SCHEMEINLINE>amb</SCHEMEINLINE> expressions<EMDASH/>to provide a mechanism to make
      alternative choices if the current choice made by the <SCHEMEINLINE>amb</SCHEMEINLINE>
      expression leads to a dead end;

    </LI>
    <LI>the top-level driver<EMDASH/>to provide a mechanism to report failure
      when the choices are exhausted;

    </LI>
    <LI> assignments<EMDASH/>to intercept failures and undo assignments
      during backtracking.
    </LI>

  </UL>
      </TEXT>

      <TEXT>
  Failures are initiated only when a dead end is encountered.
  This occurs
  <UL>
    <LI> if the user program executes <SPLITINLINE><SCHEME><SCHEMEINLINE>(amb)</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>???</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>;

    </LI>
    <LI> if the user types <SCHEMEINLINE>try-again</SCHEMEINLINE> at the top-level driver.
    </LI>

  </UL>
      </TEXT>

      <TEXT>
  Failure continuations are also called during processing of a failure:
  <UL>
    <LI>When the failure continuation created by an assignment finishes
      undoing a side effect, it calls the failure continuation it intercepted,
      in order to propagate the failure back to the choice point that
      led to this assignment or to the top level.

    </LI>
    <LI>When the failure continuation for an <SCHEMEINLINE>amb</SCHEMEINLINE> runs out of choices,
      it calls the failure continuation that was originally given to the <SCHEMEINLINE>amb</SCHEMEINLINE>,
      in order to propagate the failure back to the previous choice point
      or to the top level.
    </LI>
  </UL>
  <INDEX>continuation<SUBINDEX>in nondeterministic evaluator|)</SUBINDEX></INDEX>
      </TEXT>

      <SUBHEADING>
  <NAME>Structure of the evaluator</NAME>
      </SUBHEADING>

      <TEXT>
  <!--  \indcode{analyze}[nondeterministic] -->
  The syntax- and data-representation
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
  for the <SCHEMEINLINE>amb</SCHEMEINLINE>
  evaluator, and also the basic <SCHEMEINLINE>analyze</SCHEMEINLINE>
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>, are identical
  to those in the evaluator of section<SPACE/><REF NAME="sec:separating-analysis"/>,
  except for the fact that we need additional syntax
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
  to
  recognize the <SCHEMEINLINE>amb</SCHEMEINLINE> special 
  form:<FOOTNOTE>We assume that the evaluator supports <SCHEMEINLINE>let</SCHEMEINLINE>
    (see exercise<SPACE/><REF NAME="ex:implement-analyze-let"/>),
    which we have used in our nondeterministic programs.</FOOTNOTE>
  <SNIPPET>
    <SCHEME>
      (define (amb? exp) (tagged-list? exp 'amb))

      (define (amb-choices exp) (cdr exp))
    </SCHEME>
  </SNIPPET>
      </TEXT>

      <TEXT>
  We must also add to the dispatch in <SCHEMEINLINE>analyze</SCHEMEINLINE> a clause that will
  recognize this special form and generate an appropriate execution
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>:

  <SNIPPET>
    <SCHEME>
      ((amb? exp) (analyze-amb exp))
    </SCHEME>
  </SNIPPET>
      </TEXT>

      <TEXT>
  The top-level
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  <SCHEMEINLINE>ambeval</SCHEMEINLINE> (similar to the version of <SCHEMEINLINE>eval</SCHEMEINLINE> given in section<SPACE/><REF NAME="sec:separating-analysis"/>) analyzes the
  given expression and applies the resulting execution
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  to the
  given environment, together with two given continuations:

  <SNIPPET>
    <SCHEME>
      <!--  \indcode*{ambeval} -->
      (define (ambeval exp env succeed fail)
      ((analyze exp) env succeed fail))
    </SCHEME>
  </SNIPPET>
      </TEXT>

      <TEXT>
  <INDEX>success continuation (nondeterministic evaluator)</INDEX>
  <INDEX>failure continuation (nondeterministic evaluator)</INDEX>
  <INDEX>continuation<SUBINDEX>in nondeterministic evaluator</SUBINDEX></INDEX>
  A success continuation is a
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  of two arguments: the value just
  obtained and another failure continuation to be used if that value leads
  to a subsequent failure. A failure continuation is a
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  of no
  arguments.  So 
  <INDEX>execution
    <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE><SUBINDEX>in nondeterministic evaluator</SUBINDEX></INDEX>
  the general form of an execution
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  is

  <SNIPPET>
    <SCHEME>
      (lambda (env succeed fail)
      ;; succeed is (lambda (value fail) ^$\ldots$^)
      ;; fail is (lambda () ^$\ldots$^)
      ^$\ldots$^)
    </SCHEME>
  </SNIPPET>

  For example, executing

  <SNIPPET EVAL="no">
    <SCHEME>
      (ambeval ^exp^
            the-global-environment
            (lambda (value fail) value)
            (lambda () 'failed))
    </SCHEME>
  </SNIPPET>

  will attempt to evaluate the given expression and will return
  either the expression<APOS/>s value (if the evaluation succeeds) or
  the symbol <SCHEMEINLINE>failed</SCHEMEINLINE> (if the evaluation fails).
  The call to <SCHEMEINLINE>ambeval</SCHEMEINLINE> in the driver loop shown below uses
  much more complicated continuation
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>, which continue the
  loop and support the <SCHEMEINLINE>try-again</SCHEMEINLINE> request.
      </TEXT>

      <TEXT>
  Most of the complexity of the <SCHEMEINLINE>amb</SCHEMEINLINE> evaluator results
  from the mechanics of passing the continuations around as the
  execution
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
  call each other.  In going through the following code,
  you should compare each of the execution
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
  with the
  corresponding
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  for the ordinary evaluator given in
  section<SPACE/><REF NAME="sec:separating-analysis"/>.
      </TEXT>

      <SUBHEADING>
  <NAME>Simple expressions</NAME>
      </SUBHEADING>

      <TEXT>
  The execution
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
  for the simplest kinds of expressions are
  essentially the same as those for the ordinary evaluator, except for the
  need to manage the continuations.  The execution
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
  simply
  succeed with the value of the expression, passing along the failure
  continuation that was passed to them.

  <!--  \indcode{analyze-...}[nondeterministic|(] -->
  <SNIPPET>
    <SCHEME>
      (define (analyze-self-evaluating exp)
      (lambda (env succeed fail)
      (succeed exp fail)))

      (define (analyze-quoted exp)
      (let ((qval (text-of-quotation exp)))
      (lambda (env succeed fail)
      (succeed qval fail))))

      (define (analyze-variable exp)
      (lambda (env succeed fail)
      (succeed (lookup-variable-value exp env)
            fail)))

      (define (analyze-lambda exp)
      (let ((vars (lambda-parameters exp))
            (bproc (analyze-sequence (lambda-body exp))))
      (lambda (env succeed fail)
      (succeed (make-procedure vars bproc env)
            fail))))
    </SCHEME>
  </SNIPPET>
      </TEXT>

      <TEXT>
  <INDEX>failure, in nondeterministic computation<SUBINDEX>bug vs.</SUBINDEX></INDEX>
  Notice that looking up a variable always <QUOTE>succeeds.</QUOTE>  If <SCHEMEINLINE>lookup\?variable\?value</SCHEMEINLINE> fails to find the variable, it signals an
  error, as usual.  Such a <QUOTE>failure</QUOTE> indicates a program bug<EMDASH/>a
  reference to an unbound variable; it is not an indication that we
  should try another nondeterministic choice instead of the one that is
  currently being tried.
      </TEXT>

      <SUBHEADING>
  <NAME>Conditionals and sequences</NAME>
      </SUBHEADING>

      <TEXT>
  Conditionals are also handled in a similar way as in the ordinary
  evaluator.  The execution
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  generated by <SCHEMEINLINE>analyze-if</SCHEMEINLINE>
  invokes the predicate execution
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  <SCHEMEINLINE>pproc</SCHEMEINLINE> with a success
  continuation that checks whether the predicate value is true and goes
  on to execute either the consequent or the alternative.  If the
  execution of <SCHEMEINLINE>pproc</SCHEMEINLINE> fails, the original failure continuation for
  the <SCHEMEINLINE>if</SCHEMEINLINE> expression is called.

  <SNIPPET>
    <SCHEME>
      (define (analyze-if exp)
      (let ((pproc (analyze (if-predicate exp)))
            (cproc (analyze (if-consequent exp)))
            (aproc (analyze (if-alternative exp))))
      (lambda (env succeed fail)
      (pproc env
            <EM>;; success continuation for evaluating the predicate</EM>
            <EM>;; to obtain <SCHEMEINLINE>pred-value</SCHEMEINLINE></EM>
            (lambda (pred-value fail2)
            (if (true? pred-value)
            (cproc env succeed fail2)
            (aproc env succeed fail2)))
            <EM>;; failure continuation for evaluating the predicate</EM>
            fail))))
    </SCHEME>
  </SNIPPET>
      </TEXT>

      <TEXT>
  Sequences are also handled in the same way as in the previous
  evaluator, except for the machinations in the sub<SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  <SCHEMEINLINE>sequentially</SCHEMEINLINE> that are required for passing the continuations.
  Namely, to sequentially execute <SCHEMEINLINE>a</SCHEMEINLINE> and then <SCHEMEINLINE>b</SCHEMEINLINE>, we call <SCHEMEINLINE>a</SCHEMEINLINE> with a success continuation that calls <SCHEMEINLINE>b</SCHEMEINLINE>.

  <SNIPPET>
    <SCHEME>
      (define (analyze-sequence exps)
      (define (sequentially a b)
      (lambda (env succeed fail)
      (a env
            <EM>;; success continuation for calling <SCHEMEINLINE>a</SCHEMEINLINE></EM>
            (lambda (a-value fail2)
            (b env succeed fail2))
            <EM>;; failure continuation for calling <SCHEMEINLINE>a</SCHEMEINLINE></EM>
            fail)))
      (define (loop first-proc rest-procs)
      (if (null? rest-procs)
            first-proc
            (loop (sequentially first-proc (car rest-procs))
            (cdr rest-procs))))
      (let ((procs (map analyze exps)))
      (if (null? procs)
            (error "Empty sequence - - ANALYZE"))
      (loop (car procs) (cdr procs))))
    </SCHEME>
  </SNIPPET>
      </TEXT>

      <SUBHEADING>
  <NAME>Definitions and assignments</NAME>
      </SUBHEADING>

      <TEXT>
  Definitions are another case where we must go to some trouble to
  manage the continuations, because it is necessary to evaluate the
  definition-value expression before actually defining the new variable.
  To accomplish this, the definition-value execution
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  <SCHEMEINLINE>vproc</SCHEMEINLINE> is called with the environment, a success continuation, and the
  failure continuation.  If the execution of <SCHEMEINLINE>vproc</SCHEMEINLINE> succeeds,
  obtaining a value <SCHEMEINLINE>val</SCHEMEINLINE> for the defined variable, the variable is
  defined and the success is propagated:

  <SNIPPET>
    <SCHEME>
      (define (analyze-definition exp)
      (let ((var (definition-variable exp))
            (vproc (analyze (definition-value exp))))
      (lambda (env succeed fail)
      (vproc env                        
            (lambda (val fail2)
            (define-variable! var val env)
            (succeed 'ok fail2))
            fail))))
    </SCHEME>
  </SNIPPET>
      </TEXT>

      <TEXT>
  <INDEX>failure continuation (nondeterministic evaluator)<SUBINDEX>constructed by assignment</SUBINDEX></INDEX>
  Assignments are more interesting.  This is the first place where we
  really use the continuations, rather than just passing them around.
  The execution
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  for assignments starts out like the one for
  definitions.  It first attempts to obtain the new value to be assigned
  to the variable. If this evaluation of <SCHEMEINLINE>vproc</SCHEMEINLINE> fails, the
  assignment fails.
      </TEXT>

      <TEXT>
  If <SCHEMEINLINE>vproc</SCHEMEINLINE> succeeds, however, and we go on to make the assignment,
  we must consider the possibility that this branch of the computation
  might later fail, which will require us to backtrack out of the
  assignment.  Thus, we must arrange to undo the assignment as
  part of the backtracking 
  process.<FOOTNOTE>We didn<APOS/>t worry about undoing definitions, since we can
    <INDEX>internal definition<SUBINDEX>nondeterministic@in nondeterministic evaluator</SUBINDEX></INDEX>
    assume that internal definitions are scanned out
    (section<SPACE/><REF NAME="sec:internal-definitions"/>).</FOOTNOTE>
      </TEXT>

      <TEXT>
  This is accomplished by giving <SCHEMEINLINE>vproc</SCHEMEINLINE> a success continuation
  (marked with the comment <QUOTE>*1*</QUOTE> below) that saves the old value of
  the variable before assigning the new value to the
  variable and proceeding from the assignment.  The failure continuation
  that is passed along with the value of the assignment (marked with the
  comment <QUOTE>*2*</QUOTE> below) restores the old value of the variable
  before continuing the failure.
  That is, a successful assignment provides a failure continuation that
  will intercept a subsequent failure; whatever failure would otherwise
  have called <SCHEMEINLINE>fail2</SCHEMEINLINE> calls this
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  instead, to undo the
  assignment before actually calling <SCHEMEINLINE>fail2</SCHEMEINLINE>.

  <SNIPPET>
    <SCHEME>
      (define (analyze-assignment exp)
      (let ((var (assignment-variable exp))
            (vproc (analyze (assignment-value exp))))
      (lambda (env succeed fail)
      (vproc env
            (lambda (val fail2)        <EM>; *1*</EM>
            (let ((old-value
            (lookup-variable-value var env))) 
            (set-variable-value! var val env)
            (succeed 'ok
            (lambda ()    <EM>; *2*</EM>
            (set-variable-value! var
            old-value
            env)
            (fail2)))))
            fail))))
    </SCHEME>
  </SNIPPET>
      </TEXT>

      <SUBHEADING>
  <NAME><SPLITINLINE><SCHEME>Procedure</SCHEME><JAVASCRIPT>Function</JAVASCRIPT></SPLITINLINE>
    applications</NAME>
      </SUBHEADING>

      <TEXT>
  The execution
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  for applications contains no new ideas except
  for the technical complexity of managing the continuations.  This
  complexity arises in <SCHEMEINLINE>analyze-application</SCHEMEINLINE>, due to the need to
  keep track of the success and failure continuations as we evaluate the
  operands.  We use a
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  <SCHEMEINLINE>get-args</SCHEMEINLINE> to evaluate the list of
  operands, rather than a simple <SCHEMEINLINE>map</SCHEMEINLINE> as in the ordinary evaluator.

  <SNIPPET>
    <SCHEME>
      (define (analyze-application exp)
      (let ((fproc (analyze (operator exp)))
            (aprocs (map analyze (operands exp))))
      (lambda (env succeed fail)
      (fproc env
            (lambda (proc fail2)
            (get-args aprocs
            env
            (lambda (args fail3)
            (execute-application
            proc args succeed fail3))
            fail2))
            fail))))
    </SCHEME>
  </SNIPPET>
  <!--  \indcode{analyze-...}[nondeterministic|)] -->
      </TEXT>

      <TEXT>
  In <SCHEMEINLINE>get-args</SCHEMEINLINE>, notice how <SPLITINLINE><SCHEME><SCHEMEINLINE>cdr</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>tail</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>ing down the list of <SCHEMEINLINE>aproc</SCHEMEINLINE> execution
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
  and <SPLITINLINE><SCHEME><SCHEMEINLINE>cons</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>pair</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>ing up the resulting list of
  <SCHEMEINLINE>args</SCHEMEINLINE> is accomplished by calling each <SCHEMEINLINE>aproc</SCHEMEINLINE> in the list
  with a success continuation that recursively calls <SCHEMEINLINE>get-args</SCHEMEINLINE>.
  Each of these recursive calls to <SCHEMEINLINE>get-args</SCHEMEINLINE> has a success
  continuation whose value is the <SPLITINLINE><SCHEME><SCHEMEINLINE>cons</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>pair</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> of the newly obtained
  argument onto the list of accumulated arguments:

  <SNIPPET>
    <SCHEME>
      (define (get-args aprocs env succeed fail)
      (if (null? aprocs)
      (succeed '() fail)
      ((car aprocs) env
            <EM>;; success continuation for this <SCHEMEINLINE>aproc</SCHEMEINLINE></EM>
            (lambda (arg fail2)
            (get-args (cdr aprocs)
            env
            <EM>;; success continuation for recursive</EM>
            <EM>;; call to <SCHEMEINLINE>get-args</SCHEMEINLINE></EM>
            (lambda (args fail3)
            (succeed (cons arg args)
            fail3))
            fail2))
            fail)))
    </SCHEME>
  </SNIPPET>
      </TEXT>

      <TEXT>
  The actual
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  application, which is
  performed by <SCHEMEINLINE>execute\?application</SCHEMEINLINE>, is
  accomplished in the same way as for the ordinary evaluator, except for
  the need to manage the continuations.

  <SNIPPET>
    <SCHEME>
      <!--  \indcode*{execute-application}[nondeterministic] -->
      (define (execute-application proc args succeed fail)
      (cond ((primitive-procedure? proc)
            (succeed (apply-primitive-procedure proc args)
            fail))
            ((compound-procedure? proc)
            ((procedure-body proc)
            (extend-environment (procedure-parameters proc)
            args
            (procedure-environment proc))
            succeed
            fail))
            (else
            (error
            "Unknown procedure type - - EXECUTE-APPLICATION"
            proc))))
    </SCHEME>
  </SNIPPET>
      </TEXT>

      <SUBHEADING>
  <NAME>Evaluating <SCHEMEINLINE>amb</SCHEMEINLINE> expressions</NAME>
      </SUBHEADING>

      <TEXT>
  <INDEX>failure continuation (nondeterministic evaluator)<SUBINDEX>constructed by amb@constructed by <SCHEMEINLINE>amb</SCHEMEINLINE></SUBINDEX></INDEX>
  The <SCHEMEINLINE>amb</SCHEMEINLINE> special form is the key element in the nondeterministic
  language.  Here we see the essence of the interpretation process and
  the reason for keeping track of the continuations.  The execution
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  for <SCHEMEINLINE>amb</SCHEMEINLINE> defines a loop <SCHEMEINLINE>try-next</SCHEMEINLINE> that cycles
  through the execution
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
  for all the possible values of the
  <SCHEMEINLINE>amb</SCHEMEINLINE> expression.  Each execution
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  is called with a
  failure continuation that will try the next one.  When there are no
  more alternatives to try, the entire <SCHEMEINLINE>amb</SCHEMEINLINE> expression fails.

  <SNIPPET>
    <SCHEME>
      <!--  \indcode*{analyze-amb} -->
      (define (analyze-amb exp)
      (let ((cprocs (map analyze (amb-choices exp))))
      (lambda (env succeed fail)
      (define (try-next choices)
            (if (null? choices)
            (fail)
            ((car choices) env
            succeed
            (lambda ()
            (try-next (cdr choices))))))
      (try-next cprocs))))
    </SCHEME>
  </SNIPPET>
      </TEXT>

      <SUBHEADING>
  <NAME>Driver loop</NAME>
      </SUBHEADING>

      <INDEX>driver loop<SUBINDEX>nondeterministic@in nondeterministic evaluator</SUBINDEX></INDEX>
      <TEXT>
  <INDEX>failure continuation (nondeterministic evaluator)<SUBINDEX>constructed by driver loop</SUBINDEX></INDEX>
  The driver loop for the <SCHEMEINLINE>amb</SCHEMEINLINE> evaluator is complex, due to
  the mechanism that permits the user to try again in evaluating an
  expression.  The driver uses a
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  called <SCHEMEINLINE>internal-loop</SCHEMEINLINE>,
  which takes as argument a
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  <SCHEMEINLINE>try-again</SCHEMEINLINE>.  The intent is
  that calling <SCHEMEINLINE>try-again</SCHEMEINLINE> should go on to the next untried
  alternative in the nondeterministic evaluation.  <SCHEMEINLINE>Internal-loop</SCHEMEINLINE>
  either calls <SCHEMEINLINE>try-again</SCHEMEINLINE> in response to the user typing <SCHEMEINLINE>try-again</SCHEMEINLINE> at the driver loop, or else starts a new evaluation by
  calling <SCHEMEINLINE>ambeval</SCHEMEINLINE>.  
      </TEXT>

      <TEXT>
  The failure continuation for this call to <SCHEMEINLINE>ambeval</SCHEMEINLINE>
  <!-- %(marked <QUOTE>*2*</QUOTE> below)-->
  informs the user that there are no more values and re-invokes the driver loop.
      </TEXT>

      <TEXT>
  The success continuation for the call to <SCHEMEINLINE>ambeval</SCHEMEINLINE>
  <!-- %(marked <QUOTE>*1*</QUOTE> below)-->
  is more subtle.  We print the obtained value and then invoke
  the internal loop again with a <SCHEMEINLINE>try-again</SCHEMEINLINE>
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  that will be
  able to try the next alternative.  This <SCHEMEINLINE>next-alternative</SCHEMEINLINE>
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  is the second argument that was passed to the
  success continuation.  Ordinarily, we think of this second argument
  as a failure continuation to be used if the current evaluation branch
  later fails.  In this case, however, we have completed a successful
  evaluation, so we can invoke the <QUOTE>failure</QUOTE> alternative branch in
  order to search for additional successful evaluations.

  <SNIPPET>
    <SCHEME>
      <INDEX>prompts<SUBINDEX>nondeterministic evaluator</SUBINDEX></INDEX>
      (define input-prompt ";;; Amb-Eval input:")
      (define output-prompt ";;; Amb-Eval value:")

      <!--  \indcode*{driver-loop}[for nondeterministic evaluator] -->
      (define (driver-loop)
      (define (internal-loop try-again)
      (prompt-for-input input-prompt)
      (let ((input (read)))
      (if (eq? input 'try-again)
            (try-again)
            (begin
            (newline)
            (display ";;; Starting a new problem ")
            (ambeval input
            the-global-environment
            <EM>;; <SCHEMEINLINE>ambeval</SCHEMEINLINE> success</EM>
            (lambda (val next-alternative)
            (announce-output output-prompt)
            (user-print val)
            (internal-loop next-alternative))
            <EM>;; <SCHEMEINLINE>ambeval</SCHEMEINLINE> failure</EM>
            (lambda ()
            (announce-output
            ";;; There are no more values of")
            (user-print input)
            (driver-loop)))))))
      (internal-loop
      (lambda ()
      (newline)
      (display ";;; There is no current problem")
      (driver-loop))))
    </SCHEME>
  </SNIPPET>
      </TEXT>

      <TEXT>
  The initial call to <SCHEMEINLINE>internal-loop</SCHEMEINLINE> uses a <SCHEMEINLINE>try-again</SCHEMEINLINE>
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  that complains that there is no current
  problem and restarts the driver loop.  This is the behavior that will
  happen if the user types <SCHEMEINLINE>try-again</SCHEMEINLINE> when there is no evaluation
  in progress.
      </TEXT>

      <EXERCISE>
  Implement a new special form <SCHEMEINLINE>ramb</SCHEMEINLINE> that is like <SCHEMEINLINE>amb</SCHEMEINLINE> except that it searches alternatives in a random order, rather 
  than from left to right.  Show how this can help with Alyssa<APOS/>s problem
  in exercise<SPACE/><REF NAME="ex:sentence-generate"/>.
  <LABEL NAME="ex:ramb"/>
      </EXERCISE>


      <EXERCISE>
  Implement a new kind of assignment called <SCHEMEINLINE>permanent-set!</SCHEMEINLINE> that
  is not undone upon failure.  For example, we can choose two distinct
  elements from a list and count the number of trials required to make a
  successful choice as follows:

  <SNIPPET>
    <SCHEME>
      (define count 0)

      (let ((x (an-element-of '(a b c)))
      (y (an-element-of '(a b c))))
      (permanent-set! count (+ count 1))
      (require (not (eq? x y)))
      (list x y count))
    </SCHEME>
    <SCHEMEOUTPUT>
      ;;; Starting a new problem
      ;;; Amb-Eval value:
      (a b 2)

      ;;; Amb-Eval input:
      try-again
      ;;; Amb-Eval value:
      (a c 3)
    </SCHEMEOUTPUT>
  </SNIPPET>

  What values would have been displayed if we had used <SPLITINLINE><SCHEME><SCHEMEINLINE>set!</SCHEMEINLINE></SCHEME><JAVASCRIPT>assignment</JAVASCRIPT></SPLITINLINE> here
  rather than <SCHEMEINLINE>permanent-set!</SCHEMEINLINE><LATEXINLINE>$\,$</LATEXINLINE>?
  <LABEL NAME="ex:permanent-set"/>
      </EXERCISE>

      <EXERCISE><LABEL NAME="ex:if-fail"/>
  Implement a new construct called <SCHEMEINLINE>if-fail</SCHEMEINLINE> that permits the user to
  catch the failure of an expression.  <SCHEMEINLINE>If-fail</SCHEMEINLINE> takes two
  expressions.  It evaluates the first expression as usual and returns
  as usual if the evaluation succeeds.  If the evaluation fails,
  however, the value of the second expression is returned, as in the
  following example:
  <SNIPPET>
    <SCHEMEOUTPUT>
      ;;; Amb-Eval input:
      (if-fail (let ((x (an-element-of '(1 3 5))))
            (require (even? x))
            x)
            'all-odd)
      ;;; Starting a new problem
      ;;; Amb-Eval value:
      all-odd

      ;;; Amb-Eval input:
      (if-fail (let ((x (an-element-of '(1 3 5 8))))
            (require (even? x))
            x)
            'all-odd)
      ;;; Starting a new problem
      ;;; Amb-Eval value:
      8
    </SCHEMEOUTPUT>
  </SNIPPET>
      </EXERCISE>

      <EXERCISE>
  With <SCHEMEINLINE>permanent-set!</SCHEMEINLINE> as described in
  exercise<SPACE/><REF NAME="ex:permanent-set"/> and <SCHEMEINLINE>if-fail</SCHEMEINLINE> as in
  exercise<SPACE/><REF NAME="ex:if-fail"/>, what will be the result of evaluating
  <SNIPPET>
    <SCHEME>
      (let ((pairs '()))
      (if-fail (let ((p (prime-sum-pair '(1 3 5 8) '(20 35 110))))
            (permanent-set! pairs (cons p pairs))
            (amb))
            pairs))
    </SCHEME>
  </SNIPPET>
      </EXERCISE>

      <EXERCISE>
  <!--  \indcode{require}[as a special form] -->
  If we had not realized that <SCHEMEINLINE>require</SCHEMEINLINE> could be implemented as an
  ordinary
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  that uses <SCHEMEINLINE>amb</SCHEMEINLINE>, to be defined by the user as
  part of a nondeterministic program, we would have had to implement it
  as a special form.  This would require syntax
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>

  <SNIPPET>
    <SCHEME>
      (define (require? exp) (tagged-list? exp 'require))

      (define (require-predicate exp) (cadr exp))
    </SCHEME>
  </SNIPPET>

  and a new clause in the dispatch in <SCHEMEINLINE>analyze</SCHEMEINLINE>

  <SNIPPET>
    <SCHEME>
      ((require? exp) (analyze-require exp))
    </SCHEME>
  </SNIPPET>

  as well the
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  <SCHEMEINLINE>analyze-require</SCHEMEINLINE> that handles <SCHEMEINLINE>require</SCHEMEINLINE>
  expressions.  Complete the following definition of <SCHEMEINLINE>analyze-require</SCHEMEINLINE>.

  <SNIPPET EVAL="no">
    <SCHEME>
      (define (analyze-require exp)
      (let ((pproc (analyze (require-predicate exp))))
      (lambda (env succeed fail)
      (pproc env
            (lambda (pred-value fail2)
            (if ^??^
            ^??^
            (succeed 'ok fail2)))
            fail))))
    </SCHEME>
    <!-- 
        %(not (true? pred-value))
        %(fail2)
      -->
  </SNIPPET>
      </EXERCISE>
      <INDEX>nondeterministic evaluator|)</INDEX>

    </SUBSECTION>
