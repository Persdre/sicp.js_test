    <SUBSECTION>
      <NAME>
  Abstraction in Machine Design
      </NAME>

      <INDEX>abstraction<SUBINDEX>register@in register-machine design|(</SUBINDEX></INDEX>

      <TEXT>
  We will often define a machine to include <QUOTE>primitive</QUOTE> operations that are
  actually very complex.  For example, in sections<SPACE/><REF NAME="sec:eceval"/> and
  <REF NAME="sec:compilation"/> we will treat Scheme<APOS/>s environment
  manipulations as primitive.  Such abstraction is valuable because it
  allows us to ignore the details of parts of a machine so that we can
  concentrate on other aspects of the design.  The fact that we have
  swept a lot of complexity under the rug, however, does not mean that a
  machine design is unrealistic.  We can always replace the complex
  <QUOTE>primitives</QUOTE> by simpler primitive operations.
      </TEXT>

      <TEXT>
  Consider the GCD machine. The machine has an instruction that computes
  the remainder of the contents of registers <SCHEMEINLINE>a</SCHEMEINLINE> and <SCHEMEINLINE>b</SCHEMEINLINE> and
  assigns the result to register <SCHEMEINLINE>t</SCHEMEINLINE>.  If we want to construct the
  GCD machine without using a primitive remainder operation,
  we must specify how to compute remainders in terms of simpler
  operations, such as subtraction.  Indeed, we can write a Scheme
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  that finds remainders in this way:

  <SNIPPET>
    <SCHEME>
      (define (remainder n d)
      (if (&lt; n d)
      n
      (remainder (- n d) d)))
    </SCHEME>
  </SNIPPET>
      </TEXT>

      <TEXT>
  We can thus replace the remainder operation in the GCD machine<APOS/>s
  data paths with a subtraction operation and a comparison test.
  Figure<SPACE/><REF NAME="fig:gcd-machine-rem"/> shows the data paths and controller
  for the elaborated machine.
  The instruction

  \begin{figure}
  \epsffile{/zu/hal/sicp/chapter-5/figs/fig-5.eps}
  \figcaption {Data paths and controller for the elaborated GCD  machine.}
  <LABEL NAME="fig:gcd-machine-rem"/>
  \end{figure}                                

  <SNIPPET>
    <SCHEME>
      (assign t (op rem) (reg a) (reg b))
    </SCHEME>
  </SNIPPET>

  in the GCD controller definition is replaced by a sequence of
  instructions that contains a loop, as shown in
  figure<SPACE/><REF NAME="fig:gcd-machine-rem-controller"/>.

  \begin{figure}
  <SNIPPET>
    <!-- 
        %(registers a b t)
        %(operations &lt; - =)
      -->
    <SCHEME>
      (controller
      test-b
      (test (op =) (reg b) (const 0))
      (branch (label gcd-done))
      (assign t (reg a))
      rem-loop
      (test (op &lt;) (reg t) (reg b))
      (branch (label rem-done))
      (assign t (op -) (reg t) (reg b))
      (goto (label rem-loop))
      rem-done
      (assign a (reg b))
      (assign b (reg t))
      (goto (label test-b))
      gcd-done)
    </SCHEME>
  </SNIPPET>
  \vskip -10pt
  \figcaption {Controller instruction sequence for the GCD machine in
  figure<SPACE/><REF NAME="fig:gcd-machine-rem"/>.}
  <LABEL NAME="fig:gcd-machine-rem-controller"/>
  \end{figure}
      </TEXT>

      <EXERCISE>
  <!--  \indcode{sqrt}[register machine for] -->
  Design a machine to compute square roots using Newton<APOS/>s method, as
  described in section<SPACE/><REF NAME="sec:sqrt"/>:

  <SNIPPET>
    <SCHEME>
      (define (sqrt x)
      (define (good-enough? guess)
      (&lt; (abs (- (square guess) x)) 0.001))
      (define (improve guess)
      (average guess (/ x guess)))
      (define (sqrt-iter guess)
      (if (good-enough? guess)
            guess
            (sqrt-iter (improve guess))))
      (sqrt-iter 1.0))
    </SCHEME>
  </SNIPPET>

  Begin by assuming that <SCHEMEINLINE>good-enough?</SCHEMEINLINE> and <SCHEMEINLINE>improve</SCHEMEINLINE> operations
  are available as primitives.  Then show how to expand these in terms
  of arithmetic operations.  Describe each version of the <SCHEMEINLINE>sqrt</SCHEMEINLINE>
  machine design by drawing a data-path diagram and writing a controller
  definition in the register-machine language.
  <LABEL NAME="ex:sqrt-machine"/>
      </EXERCISE>
      <INDEX>abstraction<SUBINDEX>register@in register-machine design|)</SUBINDEX></INDEX>

    </SUBSECTION>
