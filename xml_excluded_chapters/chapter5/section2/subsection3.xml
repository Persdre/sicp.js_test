    <SUBSECTION>
      <NAME>
  Generating Execution
  <SPLITINLINE><SCHEME>Procedures</SCHEME><JAVASCRIPT>Functions</JAVASCRIPT></SPLITINLINE>
  for Instructions
      </NAME>

      <LABEL NAME="sec:ex-proc"/>
      <INDEX>execution
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE><SUBINDEX>in register-machine simulator|(</SUBINDEX></INDEX>

      <TEXT>
  The assembler calls <SCHEMEINLINE>make-execution-procedure</SCHEMEINLINE> to
  generate the execution
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  for an instruction.
  Like the <SCHEMEINLINE>analyze</SCHEMEINLINE>
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  in the evaluator of
  section<SPACE/><REF NAME="sec:separating-analysis"/>, this dispatches on the type of
  instruction to generate the appropriate execution
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>.
  <SNIPPET>
    <SCHEME>
      <!--  \indcode*{make-execution-procedure} -->
      (define (make-execution-procedure inst labels machine
            pc flag stack ops)
      (cond ((eq? (car inst) 'assign)
            (make-assign inst machine labels ops pc))
            ((eq? (car inst) 'test)
            (make-test inst machine labels ops flag pc))
            ((eq? (car inst) 'branch)
            (make-branch inst machine labels flag pc))
            ((eq? (car inst) 'goto)
            (make-goto inst machine labels pc))
            ((eq? (car inst) 'save)
            (make-save inst machine stack pc))
            ((eq? (car inst) 'restore)
            (make-restore inst machine stack pc))
            ((eq? (car inst) 'perform)
            (make-perform inst machine labels ops pc))
            (else (error "Unknown instruction type - - ASSEMBLE"
            inst))))
    </SCHEME>
  </SNIPPET>
      </TEXT>

      <TEXT>
  For each type of instruction in the register-machine language, there
  is a generator that builds an appropriate execution
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>.  The
  details of these
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
  determine both the syntax and meaning of
  the individual instructions in the register-machine language.
  We use data abstraction to isolate the detailed syntax of
  register-machine expressions from the general execution mechanism, as
  we did for evaluators in section<SPACE/><REF NAME="sec:representing-expressions"/>,
  by using syntax
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
  to extract and classify the parts of an instruction.
      </TEXT>

      <SUBHEADING>
  <NAME><SCHEMEINLINE>Assign</SCHEMEINLINE> instructions</NAME>
      </SUBHEADING>

      <!-- \indcodeplus{assign}{(in register machine)}[simulating]-->
      <TEXT>
  The <SCHEMEINLINE>make-assign</SCHEMEINLINE>
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  handles <SCHEMEINLINE>assign</SCHEMEINLINE> instructions:
  <SNIPPET>
    <SCHEME>
      <!--  \indcode*{make-assign} -->
      (define (make-assign inst machine labels operations pc)
      (let ((target
            (get-register machine (assign-reg-name inst)))
            (value-exp (assign-value-exp inst)))
      (let ((value-proc
            (if (operation-exp? value-exp)
            (make-operation-exp
            value-exp machine labels operations)
            (make-primitive-exp
            (car value-exp) machine labels))))
      (lambda ()                <EM>; execution procedure for <SCHEMEINLINE>assign</SCHEMEINLINE></EM>
            (set-contents! target (value-proc))
            (advance-pc pc)))))
    </SCHEME>
  </SNIPPET>
  <SCHEMEINLINE>Make-assign</SCHEMEINLINE> extracts the target register name (the
  second element of the instruction) and the value expression
  (the rest of the list that forms the instruction)
  from the <SCHEMEINLINE>assign</SCHEMEINLINE> instruction using the selectors
  <SNIPPET>
    <SCHEME>
      <!--  \indcode*{assign-reg-name} -->
      (define (assign-reg-name assign-instruction)
      (cadr assign-instruction))

      <!--  \indcode*{assign-value-exp} -->
      (define (assign-value-exp assign-instruction)
      (cddr assign-instruction))
    </SCHEME>
  </SNIPPET>
      </TEXT>

      <TEXT>
  The register name is looked up with <SCHEMEINLINE>get-register</SCHEMEINLINE> to produce the
  target register object.  The value expression is passed to <SCHEMEINLINE>make-operation-exp</SCHEMEINLINE> if the value is the result of an operation, and to
  <SCHEMEINLINE>make-primitive-exp</SCHEMEINLINE> otherwise.  These
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
  (shown below)
  parse the value expression and produce an execution
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  for the
  value.  This is a
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  of no arguments, called 
  <!--  \indcode{value-proc} -->
  <SCHEMEINLINE>value-proc</SCHEMEINLINE>,
  which will be evaluated during the simulation to produce the actual
  value to be assigned to the register.  Notice that the work of looking
  up the register name and parsing the value expression is performed
  just once, at assembly time, not every time the instruction is
  simulated.  This saving of work is the reason we use execution
  <INDEX>syntactic analysis, separated from execution<SUBINDEX>in register-machine
      simulator</SUBINDEX></INDEX>
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>, and corresponds directly to the saving in work we obtained
  by separating program analysis from execution in the evaluator of
  section<SPACE/><REF NAME="sec:separating-analysis"/>.
      </TEXT>

      <TEXT>
  The result returned by <SCHEMEINLINE>make-assign</SCHEMEINLINE> is the execution
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  for the <SCHEMEINLINE>assign</SCHEMEINLINE> instruction.  When this
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  is
  called (by the machine model<APOS/>s <SCHEMEINLINE>execute</SCHEMEINLINE>
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>),
  it sets the contents of the target register to the result
  obtained by executing <SCHEMEINLINE>value-proc</SCHEMEINLINE>.  Then it advances
  the <SCHEMEINLINE>pc</SCHEMEINLINE> to the next instruction by running the
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  <SNIPPET>
    <SCHEME>
      <!--  \indcode*{advance-pc} -->
      (define (advance-pc pc)
      (set-contents! pc (cdr (get-contents pc))))
    </SCHEME>
  </SNIPPET>
  <SCHEMEINLINE>Advance-pc</SCHEMEINLINE> is the normal termination for all instructions except
  <SCHEMEINLINE>branch</SCHEMEINLINE> and <SCHEMEINLINE>goto</SCHEMEINLINE>.
      </TEXT>

      <SUBHEADING>
  <NAME><SCHEMEINLINE>Test</SCHEMEINLINE>, <SCHEMEINLINE>branch</SCHEMEINLINE>, and <SCHEMEINLINE>goto</SCHEMEINLINE> instructions</NAME>
      </SUBHEADING>

      <TEXT>
  <!-- \indcodeplus{test}{(in register machine)}[simulating]-->
  <SCHEMEINLINE>Make-test</SCHEMEINLINE> handles <SCHEMEINLINE>test</SCHEMEINLINE> instructions in a similar way.  It
  extracts the expression that specifies the condition to be tested and
  generates an execution
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  for it.  At simulation time, the
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  for the condition is called, the result is assigned to the
  <SCHEMEINLINE>flag</SCHEMEINLINE> register, and the <SCHEMEINLINE>pc</SCHEMEINLINE> is advanced:
  <SNIPPET>
    <SCHEME>
      <!--  \indcode*{make-test} -->
      (define (make-test inst machine labels operations flag pc)
      (let ((condition (test-condition inst)))
      (if (operation-exp? condition)
            (let ((condition-proc
            (make-operation-exp
            condition machine labels operations)))
            (lambda ()
            (set-contents! flag (condition-proc))
            (advance-pc pc)))
            (error "Bad TEST instruction - - ASSEMBLE" inst))))

      <!--  \indcode*{test-condition} -->
      (define (test-condition test-instruction)
      (cdr test-instruction))
    </SCHEME>
  </SNIPPET>
      </TEXT>

      <TEXT>
  <!-- \indcodeplus{branch}{(in register machine)}[simulating]-->
  The execution
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  for a <SCHEMEINLINE>branch</SCHEMEINLINE> instruction checks the
  contents of the <SCHEMEINLINE>flag</SCHEMEINLINE> register and either sets the contents of
  the <SCHEMEINLINE>pc</SCHEMEINLINE> to the branch destination (if the branch is taken) or
  else just advances the <SCHEMEINLINE>pc</SCHEMEINLINE> (if the branch is not taken).  Notice
  that the indicated destination in a <SCHEMEINLINE>branch</SCHEMEINLINE> instruction must be a
  label, and the <SCHEMEINLINE>make-branch</SCHEMEINLINE>
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  enforces this.  Notice
  also that the label is looked up at assembly time, not each time the
  <SCHEMEINLINE>branch</SCHEMEINLINE> instruction is simulated.

  <SNIPPET>
    <SCHEME>
      <!--  \indcode*{make-branch} -->
      (define (make-branch inst machine labels flag pc)
      (let ((dest (branch-dest inst)))
      (if (label-exp? dest)
            (let ((insts
            (lookup-label labels (label-exp-label dest))))
            (lambda ()
            (if (get-contents flag)
            (set-contents! pc insts)
            (advance-pc pc))))
            (error "Bad BRANCH instruction - - ASSEMBLE" inst))))

      <!--  \indcode*{branch-dest} -->
      (define (branch-dest branch-instruction)
      (cadr branch-instruction))
    </SCHEME>
  </SNIPPET>
      </TEXT>

      <TEXT>
  <!-- \indcodeplus{goto}{(in register machine)}[simulating]-->
  A <SCHEMEINLINE>goto</SCHEMEINLINE> instruction is similar to a branch, except that the
  destination may be specified either as a label or as a register, and
  there is no condition to check<EMDASH/>the <SCHEMEINLINE>pc</SCHEMEINLINE> is always set to the
  new destination.
  <SNIPPET>
    <SCHEME>
      <!--  \indcode*{make-goto} -->
      (define (make-goto inst machine labels pc)
      (let ((dest (goto-dest inst)))
      (cond ((label-exp? dest)
            (let ((insts
            (lookup-label labels
            (label-exp-label dest))))
            (lambda () (set-contents! pc insts))))
            ((register-exp? dest)
            (let ((reg
            (get-register machine
            (register-exp-reg dest))))
            (lambda ()
            (set-contents! pc (get-contents reg)))))
            (else (error "Bad GOTO instruction - - ASSEMBLE"
            inst)))))

      <!--  \indcode*{goto-dest} -->
      (define (goto-dest goto-instruction)
      (cadr goto-instruction))
    </SCHEME>
  </SNIPPET>
      </TEXT>

      <SUBHEADING>
  <NAME>Other instructions</NAME>
      </SUBHEADING>

      <TEXT>
  The stack instructions <SCHEMEINLINE>save</SCHEMEINLINE> and <SCHEMEINLINE>restore</SCHEMEINLINE> simply use the
  stack with the designated register and advance the <SCHEMEINLINE>pc</SCHEMEINLINE>:
  <SNIPPET>
    <SCHEME>
      <!-- \indcodeplus{save}{(in register machine)}[simulating]-->
      <!--  \indcode*{make-save} -->
      (define (make-save inst machine stack pc)
      (let ((reg (get-register machine
            (stack-inst-reg-name inst))))
      (lambda ()
      (push stack (get-contents reg))
      (advance-pc pc))))

      <!--  \indcode*{make-restore} -->
      <!-- \indcodeplus{restore}{(in register machine)}[simulating]-->
      (define (make-restore inst machine stack pc)
      (let ((reg (get-register machine
            (stack-inst-reg-name inst))))
      (lambda ()
      (set-contents! reg (pop stack))    
      (advance-pc pc))))

      <!--  \indcode*{stack-inst-reg-name} -->
      (define (stack-inst-reg-name stack-instruction)
      (cadr stack-instruction))
    </SCHEME>
  </SNIPPET>
      </TEXT>

      <TEXT>
  <!-- \indcodeplus{perform}{(in register machine)}[simulating]-->
  The final instruction type, handled by <SCHEMEINLINE>make-perform</SCHEMEINLINE>, generates
  an execution
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  for the action to be performed.  At simulation
  time, the action
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  is executed and the <SCHEMEINLINE>pc</SCHEMEINLINE> advanced.
  <SNIPPET>
    <SCHEME>
      <!--  \indcode*{make-perform} -->
      (define (make-perform inst machine labels operations pc)
      (let ((action (perform-action inst)))
      (if (operation-exp? action)
            (let ((action-proc
            (make-operation-exp
            action machine labels operations)))
            (lambda ()
            (action-proc)
            (advance-pc pc)))
            (error "Bad PERFORM instruction - - ASSEMBLE" inst))))

      <!--  \indcode*{perform-action} -->
      (define (perform-action inst) (cdr inst))
    </SCHEME>
  </SNIPPET>
      </TEXT>

      <SUBHEADING>
  <NAME>Execution
    <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
    for subexpressions</NAME>
      </SUBHEADING>

      <TEXT>
  <!-- \indcodeplus{reg}{(in register machine)}[simulating]-->
  <!-- \indcodeplus{label}{(in register machine)}[simulating]-->
  <!-- \indcodeplus{const}{(in register machine)}[simulating]-->
  The value of a <SCHEMEINLINE>reg</SCHEMEINLINE>, <SCHEMEINLINE>label</SCHEMEINLINE>, or <SCHEMEINLINE>const</SCHEMEINLINE> expression
  may be needed for assignment to a register (<SCHEMEINLINE>make-assign</SCHEMEINLINE>) or for input to
  an operation (<SCHEMEINLINE>make-operation-exp</SCHEMEINLINE>, below).  The following
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  generates execution
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
  to produce values for these expressions
  during the simulation:
  <SNIPPET>
    <SCHEME>
      <!--  \indcode*{make-primitive-exp} -->
      (define (make-primitive-exp exp machine labels)
      (cond ((constant-exp? exp)
            (let ((c (constant-exp-value exp)))
            (lambda () c)))
            ((label-exp? exp)
            (let ((insts
            (lookup-label labels
            (label-exp-label exp))))
            (lambda () insts)))
            ((register-exp? exp)
            (let ((r (get-register machine
            (register-exp-reg exp))))
            (lambda () (get-contents r))))
            (else
            (error "Unknown expression type - - ASSEMBLE" exp))))
    </SCHEME>
  </SNIPPET>
      </TEXT>

      <TEXT>
  The syntax of <SCHEMEINLINE>reg</SCHEMEINLINE>, <SCHEMEINLINE>label</SCHEMEINLINE>, and <SCHEMEINLINE>const</SCHEMEINLINE> expressions
  is determined by
  <SNIPPET>
    <SCHEME>
      <!--  \indcode*{register-exp} -->
      (define (register-exp? exp) (tagged-list? exp 'reg))

      <!--  \indcode*{register-exp-reg} -->
      (define (register-exp-reg exp) (cadr exp))

      <!--  \indcode*{constant-exp} -->
      (define (constant-exp? exp) (tagged-list? exp 'const))

      <!--  \indcode*{constant-exp-value} -->
      (define (constant-exp-value exp) (cadr exp))

      <!--  \indcode*{label-exp} -->
      (define (label-exp? exp) (tagged-list? exp 'label))

      <!--  \indcode*{label-exp-label} -->
      (define (label-exp-label exp) (cadr exp))
    </SCHEME>
  </SNIPPET>
      </TEXT>

      <TEXT>
  <!--  \indcodeplus{op}{(in register machine)}[simulating]-->
  <SCHEMEINLINE>Assign</SCHEMEINLINE>, <SCHEMEINLINE>perform</SCHEMEINLINE>, and <SCHEMEINLINE>test</SCHEMEINLINE> instructions
  may include the application of a machine operation (specified by
  an <SCHEMEINLINE>op</SCHEMEINLINE> expression) to some operands (specified by <SCHEMEINLINE>reg</SCHEMEINLINE>
  and <SCHEMEINLINE>const</SCHEMEINLINE> expressions).
  The following
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  produces an execution
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  for an <QUOTE>operation expression</QUOTE><EMDASH/>a list containing the operation and
  operand expressions from the instruction:
  <SNIPPET>
    <SCHEME>
      <!--  \indcode*{make-operation-exp} -->
      (define (make-operation-exp exp machine labels operations)
      (let ((op (lookup-prim (operation-exp-op exp) operations))
            (aprocs
            (map (lambda (e)
            (make-primitive-exp e machine labels))
            (operation-exp-operands exp))))
      (lambda ()
      (apply op (map (lambda (p) (p)) aprocs)))))
    </SCHEME>
  </SNIPPET>
      </TEXT>

      <TEXT>
  The syntax of operation expressions is determined by
  <SNIPPET>
    <SCHEME>
      <!--  \indcode*{operation-exp} -->
      (define (operation-exp? exp)
      (and (pair? exp) (tagged-list? (car exp) 'op)))

      <!--  \indcode*{operation-exp-op} -->
      (define (operation-exp-op operation-exp)
      (cadr (car operation-exp)))

      <!--  \indcode*{operation-exp-operands} -->
      (define (operation-exp-operands operation-exp)
      (cdr operation-exp))
    </SCHEME>
  </SNIPPET>
      </TEXT>

      <TEXT>
  Observe that the treatment of operation expressions is very much like
  the treatment of
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  applications by the <SCHEMEINLINE>analyze-application</SCHEMEINLINE>
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  in the evaluator of
  section<SPACE/><REF NAME="sec:separating-analysis"/> in that we generate an execution
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  for each operand.  At simulation time, we call the
  operand
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
  and apply the Scheme
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  that simulates
  the operation to the resulting values.
  The simulation
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  is found by looking up the operation name in
  the operation table for the machine:
  <SNIPPET>
    <SCHEME>
      <!--  \indcode*{lookup-prim} -->
      (define (lookup-prim symbol operations)
      (let ((val (assoc symbol operations)))
      (if val
            (cadr val)
            (error "Unknown operation - - ASSEMBLE" symbol))))
    </SCHEME>
  </SNIPPET>
      </TEXT>

      <EXERCISE>
  The treatment of machine operations above permits them to operate
  on labels as well as on constants and the contents of registers.
  Modify the expression-processing
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
  to enforce the condition
  that operations can be used only with registers and constants.
      </EXERCISE>

      <EXERCISE>
  Design a new syntax for register-machine instructions and modify the
  simulator to use your new syntax.  Can you implement your new
  syntax without changing any part of the simulator except the
  syntax
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
  in this section?
  <LABEL NAME="ex:reg-machine-syntax"/>
      </EXERCISE>

      <EXERCISE>
  <!-- \indcodeplus{restore}{(in register machine)}-->
  <!-- \indcodeplus{save}{(in register machine)}-->
  When we introduced <SCHEMEINLINE>save</SCHEMEINLINE> and <SCHEMEINLINE>restore</SCHEMEINLINE> in
  section<SPACE/><REF NAME="sec:stack-recursion"/>, we didn<APOS/>t specify what would happen
  if you tried to restore a register that was not the last one saved, as
  in the sequence

  <SNIPPET>
    <SCHEME>
      (save y)
      (save x)
      (restore y)
    </SCHEME>
  </SNIPPET>
  There are several reasonable possibilities for the meaning of <SCHEMEINLINE>restore</SCHEMEINLINE>:
  <OL>
    <LI>
      <SPLITINLINE><SCHEME><SCHEMEINLINE>(restore y)</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>???</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> puts into <SCHEMEINLINE>y</SCHEMEINLINE> the last value saved on the
      stack, regardless of what register that value came from.  This is the
      way our simulator behaves.  Show how to take advantage of this
      behavior to eliminate one instruction from the Fibonacci machine of
      section<SPACE/><REF NAME="sec:stack-recursion"/> (figure<SPACE/><REF NAME="fig:fib-machine"/>).
    </LI>
    <LI>
      <SPLITINLINE><SCHEME><SCHEMEINLINE>(restore y)</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>???</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> puts into <SCHEMEINLINE>y</SCHEMEINLINE> the last value saved on the
      stack, but only if that value was saved from <SCHEMEINLINE>y</SCHEMEINLINE>; otherwise, it
      signals an error.  Modify the simulator to behave this way.  You will
      have to change <SCHEMEINLINE>save</SCHEMEINLINE> to put the register name on the stack along
      with the value.
    </LI>
    <LI>
      <SPLITINLINE><SCHEME><SCHEMEINLINE>(restore y)</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>???</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> puts into <SCHEMEINLINE>y</SCHEMEINLINE> the last value saved from <SCHEMEINLINE>y</SCHEMEINLINE> regardless of what other registers were saved after <SCHEMEINLINE>y</SCHEMEINLINE> and not
      restored.  Modify the simulator to behave this way.  You will have to
      associate a separate stack with each register.  You should make the
      <SCHEMEINLINE>initialize-stack</SCHEMEINLINE> operation initialize all the register stacks.
    </LI>
  </OL>
  <LABEL NAME="ex:stack-behavior"/>
      </EXERCISE>

      <EXERCISE>
  The simulator can be used to help determine the data paths required
  for implementing a machine with a given controller.  Extend
  the assembler to store the following information in the machine model:
  <UL>
    <LI>a list of all instructions, with duplicates removed, sorted by
      instruction type (<SCHEMEINLINE>assign</SCHEMEINLINE>, <SCHEMEINLINE>goto</SCHEMEINLINE>, and so on);

    </LI>
    <LI>a list (without duplicates) of the registers used to hold entry
      points (these are the registers referenced by <SCHEMEINLINE>goto</SCHEMEINLINE>
      instructions);

    </LI>
    <LI>a list (without duplicates) of the registers that are <SCHEMEINLINE>save</SCHEMEINLINE>d
      or <SCHEMEINLINE>restore</SCHEMEINLINE>d;

    </LI>
    <LI>for each register, a list (without duplicates) of the sources from
      which it is assigned (for example, the sources for register <SCHEMEINLINE>val</SCHEMEINLINE>
      in the factorial machine of Figure<SPACE/><REF NAME="fig:fact-machine"/> are
      <SPLITINLINE><SCHEME><SCHEMEINLINE>(const 1)</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>???</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> and <SPLITINLINE><SCHEME><SCHEMEINLINE>((op *) (reg n) (reg val))</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>???</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>).
    </LI>

  </UL>

  Extend the
  message-passing interface to the machine to provide access to this new
  information.  To test your analyzer, define the Fibonacci machine from
  figure<SPACE/><REF NAME="fig:fib-machine"/> and examine the lists you constructed.
  <LABEL NAME="ex:simulated-data-paths"/>
      </EXERCISE>

      <EXERCISE>
  Modify the simulator so that it uses the controller sequence to
  determine what registers the machine has rather than requiring a list
  of registers as an argument to <SCHEMEINLINE>make-machine</SCHEMEINLINE>.  Instead of
  pre-allocating the registers in <SCHEMEINLINE>make-machine</SCHEMEINLINE>, you can allocate
  them one at a time when they are first seen during assembly of the
  instructions.
      </EXERCISE>
      <INDEX>execution
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE><SUBINDEX>in register-machine simulator|)</SUBINDEX></INDEX>

    </SUBSECTION>
