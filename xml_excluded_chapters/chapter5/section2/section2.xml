  <SECTION>
    <NAME>A Register-Machine Simulator</NAME>

    <SECTIONCONTENT/>

    <LABEL NAME="sec:simulator"/>
    <INDEX>register machine<SUBINDEX>simulator|(</SUBINDEX></INDEX>
    <INDEX>register-machine simulator|(</INDEX>

    <TEXT>
      In order to gain a good understanding of the design of register
      machines, we must test the machines we design to see if they perform
      as expected.  One way to test a design is to hand-simulate the
      operation of the controller, as in exercise<SPACE/><REF NAME="ex:hand-sim"/>.  But this is
      extremely tedious for all but the simplest machines.  In this section
      we construct a simulator for machines described in the
      register-machine language.  The simulator is a Scheme program with
      four interface
      <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>.  The first uses a description of a register
      machine to construct a model of the machine (a data structure whose
      parts correspond to the parts of the machine to be simulated), and the
      other three allow us to simulate the machine by manipulating the
      model:

      <DL>
  <DT>
    <!--  \indcode{make-machine} -->
    {\smalltt (make-machine ^register-names^ ^operations^ ^controller^)}\\
  </DT>
  <DD>
    constructs and returns a model of the machine with the given
    registers, operations, and controller.
  </DD>
  <DT>
    <!--  \indcode{set-register-contents!} -->
    {\smalltt (set-register-contents! ^machine-model^ ^register-name^ ^value^)}\\
  </DT>
  <DD>
    stores a value in a simulated register in the given
    machine.
  </DD>
  <DT>
    <!--  \indcode{get-register-contents} -->
    {\smalltt (get-register-contents ^machine-model^ ^register-name^)}\\
  </DT>
  <DD>
    returns the contents of a simulated register in the given machine.
  </DD>
  <DT>
    <!-- \indcodeplus{start}{register machine}-->
    {\smalltt (start ^machine-model^)}\\
  </DT>
  <DD>
    simulates the execution of the given
    machine, starting from the beginning of the controller sequence and
    stopping when it reaches the end of the sequence.
  </DD>
      </DL>
    </TEXT>

    <TEXT>
      As an example of how these
      <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
      are used, we can define
      <SCHEMEINLINE>gcd\?machine</SCHEMEINLINE> to be a model of the GCD machine
      of section<SPACE/><REF NAME="sec:register-machine-language"/> as follows:

      <SNIPPET>
  <SCHEME>
    <!--  \indcode{gcd}[register machine for] -->
    (define gcd-machine
    (make-machine
    '(a b t)
    (list (list 'rem remainder) (list '= =))
    '(test-b
    (test (op =) (reg b) (const 0))
    (branch (label gcd-done))
    (assign t (op rem) (reg a) (reg b))
    (assign a (reg b))
    (assign b (reg t))
    (goto (label test-b))
    gcd-done)))
  </SCHEME>
      </SNIPPET>
      The first argument to <SCHEMEINLINE>make-machine</SCHEMEINLINE> is a list of register names.
      The next argument is a table (a list of two-element lists) that pairs
      each operation name with a Scheme
      <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
      that implements the operation
      (that is, produces the same output value given the same input values).
      The last argument specifies the controller as a list of labels and
      machine instructions, as in section<SPACE/><REF NAME="sec:designing-register-machines"/>.
    </TEXT>

    <TEXT>
      To compute GCDs with this machine, we set the
      input registers, start the machine, and examine the result when the
      simulation terminates:
      <SNIPPET>
  <SCHEME>
    (set-register-contents! gcd-machine 'a 206)
  </SCHEME>
  <SCHEMEOUTPUT>
    done
  </SCHEMEOUTPUT>
      </SNIPPET>

      <SNIPPET>
  <SCHEME>
    (set-register-contents! gcd-machine 'b 40)
  </SCHEME>
  <SCHEMEOUTPUT>
    done
  </SCHEMEOUTPUT>
      </SNIPPET>

      <SNIPPET>
  <SCHEME>
    (start gcd-machine)
  </SCHEME>
  <SCHEMEOUTPUT>
    done
  </SCHEMEOUTPUT>
      </SNIPPET>

      <SNIPPET>
  <SCHEME>
    (get-register-contents gcd-machine 'a)
  </SCHEME>
  <SCHEMEOUTPUT>
    2
  </SCHEMEOUTPUT>
      </SNIPPET>
    </TEXT>

    <TEXT>
      This computation will run much more slowly than a <SCHEMEINLINE>gcd</SCHEMEINLINE>
      <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
      written in Scheme, because we will simulate low-level machine
      instructions, such as <SCHEMEINLINE>assign</SCHEMEINLINE>, by much more complex operations.
    </TEXT>

    <EXERCISE>
      Use the simulator to test the machines you designed in
      exercise<SPACE/><REF NAME="ex:design-reg-machines"/>.
      <LABEL NAME="ex:use-simulator"/>
    </EXERCISE>

    <!-- Subsection 1 : The Machine Model -->
    &subsection5.2.1;

    <!-- Subsection 2 : The Assembler -->
    &subsection5.2.2;

    <!-- Subsection 3 : Generating Execution Procedures for Instructions -->
    &subsection5.2.3;

    <!-- Subsection 4 : Monitoring Machine Performance -->
    &subsection5.2.4;

  </SECTION>
