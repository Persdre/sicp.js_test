    <SUBSECTION>
      <NAME>
  Conditionals, Assignments, and Definitions
      </NAME>

      <LABEL NAME="sec:cond-assign-def-evaluation"/>
      <TEXT>
  <INDEX>explicit-control evaluator for Scheme<SUBINDEX>conditionals</SUBINDEX></INDEX>
  As with the metacircular evaluator, special forms are handled by
  selectively evaluating fragments of the expression.  For an <SCHEMEINLINE>if</SCHEMEINLINE>
  expression, we must evaluate the predicate and decide, based on the
  value of predicate, whether to evaluate the consequent or the
  alternative.
      </TEXT>

      <TEXT>
  Before evaluating the predicate, we save the <SCHEMEINLINE>if</SCHEMEINLINE> expression
  itself so that we can later extract the consequent or alternative.  We
  also save the environment, which we will need later in order to
  evaluate the consequent or the alternative, and we save <SCHEMEINLINE>continue</SCHEMEINLINE>, which we will need later in order to return to the
  evaluation of the expression that is waiting for the value of the <SCHEMEINLINE>if</SCHEMEINLINE>.

  <SNIPPET>
    <SCHEME>
      <!--  \indcode*{ev-if} -->
      ev-if
      (save exp)                    <EM>; save expression for later</EM>
      (save env)
      (save continue)
      (assign continue (label ev-if-decide))
      (assign exp (op if-predicate) (reg exp))
      (goto (label eval-dispatch))  <EM>; evaluate the predicate</EM>
    </SCHEME>
  </SNIPPET>
      </TEXT>

      <TEXT>
  When we return from evaluating the predicate, we test whether it was
  true or false and, depending on the result, place either the
  consequent or the alternative in <SCHEMEINLINE>exp</SCHEMEINLINE> before going to <SCHEMEINLINE>eval-dispatch</SCHEMEINLINE>.  Notice that restoring <SCHEMEINLINE>env</SCHEMEINLINE> and <SCHEMEINLINE>continue</SCHEMEINLINE>
  here sets up <SCHEMEINLINE>eval-dispatch</SCHEMEINLINE> to have the correct environment and
  to continue at the right place to receive the value of the <SCHEMEINLINE>if</SCHEMEINLINE>
  expression. 

  <SNIPPET>
    <SCHEME>
      ev-if-decide
      (restore continue)
      (restore env)
      (restore exp)
      (test (op true?) (reg val))
      (branch (label ev-if-consequent))
      ev-if-alternative
      (assign exp (op if-alternative) (reg exp))
      (goto (label eval-dispatch))
      ev-if-consequent
      (assign exp (op if-consequent) (reg exp))
      (goto (label eval-dispatch))
    </SCHEME>
  </SNIPPET>
      </TEXT>

      <SUBHEADING> 
  <NAME>Assignments and definitions</NAME>
      </SUBHEADING>

      <TEXT>
  <INDEX>explicit-control evaluator for Scheme<SUBINDEX>assignments</SUBINDEX></INDEX>
  Assignments are handled by <SCHEMEINLINE>ev-assignment</SCHEMEINLINE>, which is reached from
  <SCHEMEINLINE>eval-dispatch</SCHEMEINLINE> with the assignment expression in <SCHEMEINLINE>exp</SCHEMEINLINE>.  The code at <SCHEMEINLINE>ev-assignment</SCHEMEINLINE> first evaluates the value part of the expression and
  then installs the new value in the environment.  <SCHEMEINLINE>Set-variable-value!</SCHEMEINLINE> is assumed to be available as a machine
  operation.

  <SNIPPET>
    <SCHEME>
      <!--  \indcode*{ev-assignment} -->
      ev-assignment
      (assign unev (op assignment-variable) (reg exp))
      (save unev)                   <EM>; save variable for later</EM>
      (assign exp (op assignment-value) (reg exp))
      (save env)
      (save continue)
      (assign continue (label ev-assignment-1))
      (goto (label eval-dispatch))  <EM>; evaluate the assignment value</EM>
      ev-assignment-1
      (restore continue)
      (restore env)
      (restore unev)
      (perform
      (op set-variable-value!) (reg unev) (reg val) (reg env))
      (assign val (const ok))
      (goto (reg continue))
    </SCHEME>
  </SNIPPET>
      </TEXT>

      <TEXT>
  <INDEX>explicit-control evaluator for Scheme<SUBINDEX>definitions</SUBINDEX></INDEX>
  Definitions are handled in a similar way:
  <SNIPPET>
    <SCHEME>
      <!--  \indcode*{ev-definition} -->
      ev-definition
      (assign unev (op definition-variable) (reg exp))
      (save unev)                   <EM>; save variable for later</EM>
      (assign exp (op definition-value) (reg exp))
      (save env)
      (save continue)
      (assign continue (label ev-definition-1))
      (goto (label eval-dispatch))  <EM>; evaluate the definition value</EM>
      ev-definition-1
      (restore continue)
      (restore env)
      (restore unev)
      (perform
      (op define-variable!) (reg unev) (reg val) (reg env))
      (assign val (const ok))
      (goto (reg continue))
    </SCHEME>
  </SNIPPET>
      </TEXT>

      <EXERCISE>
  <INDEX>derived expressions in evaluator<SUBINDEX>adding to explicit-control evaluator</SUBINDEX></INDEX>
  <INDEX>explicit-control evaluator for Scheme<SUBINDEX>derived expressions</SUBINDEX></INDEX>
  <INDEX>explicit-control evaluator for Scheme<SUBINDEX>special forms (additional)</SUBINDEX></INDEX>
  Extend the evaluator to handle derived expressions such as <SCHEMEINLINE>cond</SCHEMEINLINE>,
  <SCHEMEINLINE>let</SCHEMEINLINE>, and so on (section<SPACE/><REF NAME="sec:representing-expressions"/>).
  You may <QUOTE>cheat</QUOTE> and assume that the syntax
  transformers such as <SCHEMEINLINE>cond-&gt;if</SCHEMEINLINE> are available as machine
  operations.<FOOTNOTE>This isn<APOS/>t really cheating.  In an actual
    implementation built from scratch, we would use our explicit-control
    evaluator to interpret a Scheme program that performs source-level
    transformations like <SCHEMEINLINE>cond-&gt;if</SCHEMEINLINE> in a syntax phase that runs before
    execution.</FOOTNOTE>
  <LABEL NAME="ex:derived-expressions"/>
      </EXERCISE>

      <EXERCISE>
  <INDEX>explicit-control evaluator for Scheme<SUBINDEX>special forms (additional)</SUBINDEX></INDEX>
  Implement <SCHEMEINLINE>cond</SCHEMEINLINE> as a new basic special form without
  reducing it to <SCHEMEINLINE>if</SCHEMEINLINE>.  You will have to construct a loop that tests
  the predicates of successive <SCHEMEINLINE>cond</SCHEMEINLINE> clauses until you find one
  that is true, and then use <SCHEMEINLINE>ev-sequence</SCHEMEINLINE> to evaluate the actions
  of the clause.
  <LABEL NAME="ex:eceval-cond"/>
      </EXERCISE>

      <EXERCISE>
  <INDEX>explicit-control evaluator for Scheme<SUBINDEX>normal-order evaluation</SUBINDEX></INDEX>
  <INDEX>normal-order evaluation<SUBINDEX>explicit@in explicit-control evaluator</SUBINDEX></INDEX>
  Modify the evaluator so that it uses normal-order evaluation,
  based on the lazy evaluator of section<SPACE/><REF NAME="sec:lazy-evaluation"/>.
      </EXERCISE>

    </SUBSECTION>
