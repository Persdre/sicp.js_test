    <SUBSECTION>
      <NAME>
  Compiling Combinations
      </NAME>

      <LABEL NAME="sec:compiling-combinations"/>
      <INDEX>compiler for Scheme<SUBINDEX><SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
    applications|(</SUBINDEX></INDEX>
      <INDEX>compiler for Scheme<SUBINDEX>combinations|(</SUBINDEX></INDEX>
      <TEXT>
  The essence of the compilation process is the compilation of
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  applications.
  The code for a combination compiled with a given target and linkage
  has the form
  <SNIPPET>
    <SCHEME EVAL="no">
      ^compilation of operator, target ^ proc^, linkage^ next
      ^evaluate operands and construct argument list in^ argl
      ^compilation of procedure call with given target and linkage^
    </SCHEME>
  </SNIPPET>
      </TEXT>

      <TEXT>
  The registers <SCHEMEINLINE>env</SCHEMEINLINE>, <SCHEMEINLINE>proc</SCHEMEINLINE>, and <SCHEMEINLINE>argl</SCHEMEINLINE> may have to be
  saved and restored during evaluation of the operator and operands.
  Note that this is the only place in the compiler where a target other
  than <SCHEMEINLINE>val</SCHEMEINLINE> is specified.
      </TEXT>

      <TEXT>
  The required code is generated by <SCHEMEINLINE>compile-application</SCHEMEINLINE>.  This
  recursively compiles the operator, to produce code that puts the
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  to be applied into <SCHEMEINLINE>proc</SCHEMEINLINE>, and compiles the operands, to
  produce code that evaluates the individual operands of the
  application.  The instruction sequences for the operands are combined
  (by <SCHEMEINLINE>construct-arglist</SCHEMEINLINE>) with code that constructs the list of
  arguments in <SCHEMEINLINE>argl</SCHEMEINLINE>, and the resulting argument-list code is
  combined with the
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  code and the code that performs the
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  call (produced by <SCHEMEINLINE>compile-procedure-call</SCHEMEINLINE>).  In
  appending the code sequences, the <SCHEMEINLINE>env</SCHEMEINLINE> register must be preserved
  around the evaluation of the operator (since evaluating the operator
  might modify <SCHEMEINLINE>env</SCHEMEINLINE>, which will be needed to evaluate the
  operands), and the <SCHEMEINLINE>proc</SCHEMEINLINE> register must be preserved around the
  construction of the argument list (since evaluating the operands might
  modify <SCHEMEINLINE>proc</SCHEMEINLINE>, which will be needed for the actual
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  application).  <SCHEMEINLINE>Continue</SCHEMEINLINE> must also be preserved throughout, since
  it is needed for the linkage in the
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  call.

  <SNIPPET>
    <SCHEME>
      <!--  \indcode*{compile-application} -->
      (define (compile-application exp target linkage)
      (let ((proc-code (compile (operator exp) 'proc 'next))
            (operand-codes
            (map (lambda (operand) (compile operand 'val 'next))
            (operands exp))))
      (preserving '(env continue)
      proc-code
      (preserving '(proc continue)
      (construct-arglist operand-codes)
      (compile-procedure-call target linkage)))))
    </SCHEME>
  </SNIPPET>
      </TEXT>

      <TEXT>
  The code to construct the argument list will evaluate each operand into
  <SCHEMEINLINE>val</SCHEMEINLINE> and then <SPLITINLINE><SCHEME><SCHEMEINLINE>cons</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>pair</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> that value onto the argument list being
  accumulated in <SCHEMEINLINE>argl</SCHEMEINLINE>.
  Since we <SPLITINLINE><SCHEME><SCHEMEINLINE>cons</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>pair</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> the arguments onto <SCHEMEINLINE>argl</SCHEMEINLINE> in sequence, we must
  start with the last argument and end with the first, so that the
  arguments will appear in order from first to last in the resulting list.
  Rather than waste an instruction by initializing <SCHEMEINLINE>argl</SCHEMEINLINE> to the empty list
  to set up for this sequence of evaluations,
  we make the first code sequence construct the initial <SCHEMEINLINE>argl</SCHEMEINLINE>.
  The general form of the argument-list construction is thus as follows:

  <SNIPPET EVAL="no">
    <SCHEME>
      ^compilation of last operand, targeted to^ val
      (assign argl (op list) (reg val))
      ^compilation of next operand, targeted to^ val
      (assign argl (op cons) (reg val) (reg argl))
      ^$\ldots$^
      ^compilation of first operand, targeted to^ val
      (assign argl (op cons) (reg val) (reg argl))
    </SCHEME>
  </SNIPPET>
      </TEXT>

      <TEXT>
  <SCHEMEINLINE>Argl</SCHEMEINLINE> must be preserved around each operand evaluation except
  the first (so that arguments accumulated so far won<APOS/>t be lost), and
  <SCHEMEINLINE>env</SCHEMEINLINE> must be preserved around each operand evaluation
  except the last (for use by subsequent operand evaluations).
      </TEXT>

      <TEXT>
  Compiling this argument code is a bit tricky, because of
  the special treatment of the first operand to be evaluated and the
  need to preserve <SCHEMEINLINE>argl</SCHEMEINLINE> and <SCHEMEINLINE>env</SCHEMEINLINE> in different places.
  The <SCHEMEINLINE>construct-arglist</SCHEMEINLINE>
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  takes as arguments the code that
  evaluates the individual operands.  If there are no operands at all, it simply
  emits the instruction

  <SNIPPET>
    <SCHEME>
      (assign argl (const ()))
    </SCHEME>
  </SNIPPET>
      </TEXT>

      <TEXT>
  Otherwise, <SCHEMEINLINE>construct-arglist</SCHEMEINLINE> creates code that initializes <SCHEMEINLINE>argl</SCHEMEINLINE> with the last argument, and appends code that evaluates
  the rest of the arguments and adjoins them to <SCHEMEINLINE>argl</SCHEMEINLINE> in
  succession.  In order to process the arguments from last to
  first, we must reverse the list of operand code sequences from the order
  supplied by <SCHEMEINLINE>compile-application</SCHEMEINLINE>.

  <SNIPPET>
    <SCHEME>
      <!--  \indcode*{construct-arglist} -->
      (define (construct-arglist operand-codes)
      (let ((operand-codes (reverse operand-codes)))
      (if (null? operand-codes)
            (make-instruction-sequence '() '(argl)
            '((assign argl (const ()))))
            (let ((code-to-get-last-arg
            (append-instruction-sequences
            (car operand-codes)
            (make-instruction-sequence '(val) '(argl)
            '((assign argl (op list) (reg val)))))))
            (if (null? (cdr operand-codes))
            code-to-get-last-arg
            (preserving '(env)
            code-to-get-last-arg
            (code-to-get-rest-args
            (cdr operand-codes))))))))

      (define (code-to-get-rest-args operand-codes)
      (let ((code-for-next-arg
            (preserving '(argl)
            (car operand-codes)
            (make-instruction-sequence '(val argl) '(argl)
            '((assign argl
            (op cons) (reg val) (reg argl)))))))
      (if (null? (cdr operand-codes))
            code-for-next-arg
            (preserving '(env)
            code-for-next-arg
            (code-to-get-rest-args (cdr operand-codes))))))
    </SCHEME>
  </SNIPPET>
      </TEXT>

      <SUBHEADING> 
  <NAME>Applying
    <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE></NAME>
      </SUBHEADING>

      <TEXT>
  <!--  %linekludge - - discretionary hyphen in metacircular -->
  After evaluating the elements of a combination, the compiled code must
  apply the
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  in <SCHEMEINLINE>proc</SCHEMEINLINE> to the arguments in <SCHEMEINLINE>argl</SCHEMEINLINE>.  The
  code performs essentially the same dispatch as the <SCHEMEINLINE>apply</SCHEMEINLINE>
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  in the
  meta\-circular evaluator of section<SPACE/><REF NAME="sec:core-of-evaluator"/> or the
  <SCHEMEINLINE>apply-dispatch</SCHEMEINLINE> entry point in the explicit-control evaluator of
  section<SPACE/><REF NAME="sec:procedure-application"/>.  It checks whether the
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  to be applied is a primitive
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  or a compiled
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>.  For a primitive
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>, it uses <SCHEMEINLINE>apply-primitive-procedure</SCHEMEINLINE>; we will see shortly how it handles
  compiled
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>.  The
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>-application code has the following
  form:

  <SNIPPET EVAL="no">
    <SCHEME>
      (test (op primitive-procedure?) (reg proc))
      (branch (label primitive-branch))
      compiled-branch
      ^code to apply compiled procedure with given target and appropriate linkage^
      primitive-branch
      (assign ^target^
            (op apply-primitive-procedure)
            (reg proc)
            (reg argl))
      ^linkage^
      after-call
    </SCHEME>
  </SNIPPET>
      </TEXT>

      <TEXT>
  Observe that the compiled branch must skip around the primitive
  branch.  Therefore, if the linkage for the original
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  call was
  <SCHEMEINLINE>next</SCHEMEINLINE>, the compound branch must use a linkage that jumps to a
  label that is inserted after the primitive branch.  (This is similar
  to the linkage used for the true branch in <SCHEMEINLINE>compile-if</SCHEMEINLINE>.)

  <SNIPPET>
    <SCHEME>
      <!--  \indcode*{compile-procedure-call} -->
      (define (compile-procedure-call target linkage)
      (let ((primitive-branch (make-label 'primitive-branch))
            (compiled-branch (make-label 'compiled-branch))
            (after-call (make-label 'after-call)))
      (let ((compiled-linkage
            (if (eq? linkage 'next) after-call linkage)))
      (append-instruction-sequences
      (make-instruction-sequence '(proc) '()
            `((test (op primitive-procedure?) (reg proc))
            (branch (label ,primitive-branch))))
      (parallel-instruction-sequences
            (append-instruction-sequences
            compiled-branch
            (compile-proc-appl target compiled-linkage))
            (append-instruction-sequences
            primitive-branch
            (end-with-linkage linkage
            (make-instruction-sequence '(proc argl)
            (list target)
            `((assign ,target
            (op apply-primitive-procedure)
            (reg proc)
            (reg argl)))))))
      after-call))))
    </SCHEME>
  </SNIPPET>
      </TEXT>

      <TEXT>
  The primitive and compound branches, like the true
  and false branches in <SCHEMEINLINE>compile-if</SCHEMEINLINE>, are appended using
  <SCHEMEINLINE>parallel-instruction-sequences</SCHEMEINLINE> rather than the ordinary <SCHEMEINLINE>append-instruction-sequences</SCHEMEINLINE>, because they will
  not be executed sequentially.
      </TEXT>

      <SUBHEADING> 
  <NAME>Applying compiled
    <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE></NAME>
      </SUBHEADING>

      <TEXT>
  The code that handles
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  application is the most subtle part of
  the compiler, even though the instruction sequences it generates are
  very short.  A compiled
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  (as constructed by <SCHEMEINLINE>compile-lambda</SCHEMEINLINE>) has an entry point, which is a label that designates
  where the code for the
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  starts.  The code at this entry point
  computes a result in <SCHEMEINLINE>val</SCHEMEINLINE> and returns by executing the
  instruction <SPLITINLINE><SCHEME><SCHEMEINLINE>(goto (reg continue))</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>???</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>.  Thus, we might expect the
  code for a compiled-<SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  application (to be generated by <SCHEMEINLINE>compile-proc-appl</SCHEMEINLINE>) with a given target and linkage to look like this
  if the linkage is a label
  \def\aligncomment#1#2{\leavevmode\rlap{#1}\hspace{#2}}
  <SNIPPET EVAL="no">
    <SCHEME>
      (assign continue (label proc-return))
      (assign val (op compiled-procedure-entry) (reg proc))
      (goto (reg val))
      proc-return
      <!--  % (assign ^target^ (reg val)) <EM>; included if target is not <SCHEMEINLINE>val</SCHEMEINLINE></EM> -->
      \aligncomment{ (assign ^target^ (reg val))}{2in}<EM>; included if target is not <SCHEMEINLINE>val</SCHEMEINLINE></EM>
      <!--  % (goto (label ^linkage^))   <EM>; linkage code</EM> -->
      \aligncomment{ (goto (label ^linkage^))}{2in}<EM>; linkage code</EM>
    </SCHEME>
  </SNIPPET>

  or like this if the linkage is <SCHEMEINLINE>return</SCHEMEINLINE>.
  <SNIPPET EVAL="no">
    <SCHEME>
      (save continue)
      (assign continue (label proc-return))
      (assign val (op compiled-procedure-entry) (reg proc))
      (goto (reg val))
      proc-return
      <!--  % (assign ^target^ (reg val)) <EM>; included if target is not <SCHEMEINLINE>val</SCHEMEINLINE></EM> -->
      \aligncomment{ (assign ^target^ (reg val))}{2in}<EM>; included if target is not <SCHEMEINLINE>val</SCHEMEINLINE></EM>
      (restore continue)
      <!--  % (goto (reg continue))      <EM>; linkage code</EM> -->
      \aligncomment{ (goto (reg continue))}{2in}<EM>; linkage code</EM>
    </SCHEME>
  </SNIPPET>
      </TEXT>

      <TEXT>
  This code sets up <SCHEMEINLINE>continue</SCHEMEINLINE> so that the
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  will return to a
  label <SCHEMEINLINE>proc-return</SCHEMEINLINE> and jumps to the
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE><APOS/>s entry point.  The code
  at <SCHEMEINLINE>proc\?return</SCHEMEINLINE> transfers the
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE><APOS/>s result from <SCHEMEINLINE>val</SCHEMEINLINE>
  to the target register (if necessary) and then jumps to
  the location specified by the linkage.
  (The linkage is always <SCHEMEINLINE>return</SCHEMEINLINE> or a label, because <SCHEMEINLINE>compile\?procedure\?call</SCHEMEINLINE> replaces a <SCHEMEINLINE>next</SCHEMEINLINE> linkage for the
  compound-procedure branch by an <SCHEMEINLINE>after-call</SCHEMEINLINE> label.)
      </TEXT>

      <TEXT>
  In fact, if the target is not <SCHEMEINLINE>val</SCHEMEINLINE>, that is exactly the code our
  compiler will generate.<FOOTNOTE>Actually, we signal an error when the target is not <SCHEMEINLINE>val</SCHEMEINLINE>
    and the linkage is <SCHEMEINLINE>return</SCHEMEINLINE>, since
    the only place we request <SCHEMEINLINE>return</SCHEMEINLINE> linkages is in compiling
    <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>, and our convention is that
    <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
    return their
    values in <SCHEMEINLINE>val</SCHEMEINLINE>.</FOOTNOTE>
  Usually, however, the target is <SCHEMEINLINE>val</SCHEMEINLINE> (the only time the compiler
  specifies a different register is when targeting the evaluation of an
  operator to <SCHEMEINLINE>proc</SCHEMEINLINE>), so the
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  result is put directly into
  the target register and there is no need to return to a special
  location that copies it.  Instead, we simplify the code by
  setting up <SCHEMEINLINE>continue</SCHEMEINLINE> so that the
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  will <QUOTE>return</QUOTE>
  directly to the place specified by the caller<APOS/>s linkage:
  <SNIPPET EVAL="no">
    <SCHEME>
      ^set up^ continue ^for linkage^
      (assign val (op compiled-procedure-entry) (reg proc))
      (goto (reg val))
    </SCHEME>
  </SNIPPET>
      </TEXT>

      <TEXT>
  If the linkage is a label, we set up <SCHEMEINLINE>continue</SCHEMEINLINE> so that the
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  will return to
  that label.  (That is, the <SPLITINLINE><SCHEME><SCHEMEINLINE>(goto (reg continue))</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>???</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> the
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  ends with becomes equivalent to the <SPLITINLINE><SCHEME><SCHEMEINLINE>(goto (label ^linkage^))</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>???</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> at
  <SCHEMEINLINE>proc-return</SCHEMEINLINE> above.)
  <SNIPPET EVAL="no">
    <SCHEME>
      (assign continue (label ^linkage^))
      (assign val (op compiled-procedure-entry) (reg proc))
      (goto (reg val))
    </SCHEME>
  </SNIPPET>
      </TEXT>

      <TEXT>
  If the linkage is <SCHEMEINLINE>return</SCHEMEINLINE>, we don<APOS/>t need to set up <SCHEMEINLINE>continue</SCHEMEINLINE>
  at all: It already holds the desired location.  (That is, the <SPLITINLINE><SCHEME><SCHEMEINLINE>(goto (reg continue))</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>???</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> the
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  ends with goes directly to the
  place where the <SPLITINLINE><SCHEME><SCHEMEINLINE>(goto (reg continue))</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>???</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> at <SCHEMEINLINE>proc-return</SCHEMEINLINE> would
  have gone.)
  <SNIPPET>
    <SCHEME>
      (assign val (op compiled-procedure-entry) (reg proc))
      (goto (reg val))
    </SCHEME>
  </SNIPPET>
      </TEXT>

      <TEXT>
  <INDEX>compiler for Scheme<SUBINDEX>tail-recursive code generated by</SUBINDEX></INDEX>
  <INDEX>tail recursion<SUBINDEX>compiler and</SUBINDEX></INDEX>
  With this implementation of the <SCHEMEINLINE>return</SCHEMEINLINE> linkage, the compiler
  generates tail-recursive code.  Calling a
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  as the final step
  in a
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  body does a direct transfer, without saving any
  information on the stack.
      </TEXT>

      <TEXT>
  Suppose instead that we had handled the case of a
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  call with
  a linkage of <SCHEMEINLINE>return</SCHEMEINLINE> and a target of <SCHEMEINLINE>val</SCHEMEINLINE> as shown above for
  a non-<SCHEMEINLINE>val</SCHEMEINLINE> target.  This would destroy tail recursion.  Our
  system would still give the same value for any expression.  But each
  time we called a
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>, we would save <SCHEMEINLINE>continue</SCHEMEINLINE> and return
  after the call to undo the (useless) save.  These extra saves would
  accumulate during a nest of
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  calls.<FOOTNOTE>Making a
    <INDEX>compiler<SUBINDEX>tail recursion, stack allocation, and garbage-collection</SUBINDEX></INDEX>
    compiler generate tail-recursive code might seem like a
    straightforward idea.  But most compilers for common languages,
    including C and Pascal, do not do this, and therefore these languages
    cannot represent iterative processes in terms of
    <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
    call alone.
    The difficulty with 
    <INDEX>tail recursion<SUBINDEX>garbage collection and</SUBINDEX></INDEX>
    <INDEX>garbage collection<SUBINDEX>tail recursion and</SUBINDEX></INDEX>
    <INDEX>stack allocation and tail recursion</INDEX>
    tail recursion in these languages is that their
    implementations use the stack to store
    <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
    arguments and local
    variables as well as return addresses.  The Scheme implementations
    described in this book store arguments and variables in memory to be
    garbage-collected.  The reason for using the stack for variables and
    arguments is that it avoids the need for garbage collection in
    languages that would not otherwise require it, and is generally
    believed to be more efficient.  Sophisticated <SPLITINLINE><SCHEME>Lisp</SCHEME><JAVASCRIPT>JavaScript</JAVASCRIPT></SPLITINLINE> compilers can, in
    fact, use the stack for arguments without destroying tail recursion.
    (See 
    <INDEX>Hanson, Christopher P.</INDEX>
    <CITATION>Hanson 1990</CITATION> for a description.)  There is also some debate about
    whether stack allocation is actually more efficient than garbage
    collection in the first place, but the details seem to hinge on fine
    points of computer architecture.  (See 
    <INDEX>Appel, Andrew W.</INDEX>
    <CITATION>Appel 1987</CITATION> and 
    <INDEX>Miller, James S.</INDEX><INDEX>Rozas, Guillermo Juan</INDEX>
    Miller and Rozas
    1994 for opposing views on this issue.)</FOOTNOTE>
      </TEXT>

      <TEXT>
  <SCHEMEINLINE>Compile-proc-appl</SCHEMEINLINE> generates the above
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>-application code by
  considering four cases, depending on whether the target for the call
  is <SCHEMEINLINE>val</SCHEMEINLINE> and whether the linkage is <SCHEMEINLINE>return</SCHEMEINLINE>.
  Observe that the instruction sequences are
  declared to modify all the registers, since executing the
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  body can change the registers in arbitrary ways.<FOOTNOTE>The variable
    <INDEX>compiler for Scheme<SUBINDEX>register use</SUBINDEX></INDEX>
    <SCHEMEINLINE>all-regs</SCHEMEINLINE> is bound to the list of names of all the registers:
    <SNIPPET>
      <SCHEME>
        <!-- \indcodeplus*{all-regs}{(compiler)}-->
        (define all-regs '(env proc val argl continue))
      </SCHEME>
    </SNIPPET>
  </FOOTNOTE>
  Also note that the code sequence for the case with target <SCHEMEINLINE>val</SCHEMEINLINE>
  and linkage <SCHEMEINLINE>return</SCHEMEINLINE> is declared to need <SCHEMEINLINE>continue</SCHEMEINLINE>:  Even
  though <SCHEMEINLINE>continue</SCHEMEINLINE> is not explicitly used in the two-instruction
  sequence, we must be sure that <SCHEMEINLINE>continue</SCHEMEINLINE> will have the correct
  value when we enter the compiled
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>.

  <SNIPPET>
    <SCHEME>
      <!--  \indcode*{compile-proc-appl} -->
      (define (compile-proc-appl target linkage)
      (cond ((and (eq? target 'val) (not (eq? linkage 'return)))
            (make-instruction-sequence '(proc) all-regs
            `((assign continue (label ,linkage))
            (assign val (op compiled-procedure-entry)
            (reg proc))
            (goto (reg val)))))
            ((and (not (eq? target 'val))
            (not (eq? linkage 'return)))
            (let ((proc-return (make-label 'proc-return)))
            (make-instruction-sequence '(proc) all-regs
            `((assign continue (label ,proc-return))
            (assign val (op compiled-procedure-entry)
            (reg proc))
            (goto (reg val))
            ,proc-return
            (assign ,target (reg val))
            (goto (label ,linkage))))))
            ((and (eq? target 'val) (eq? linkage 'return))
            (make-instruction-sequence '(proc continue) all-regs
            '((assign val (op compiled-procedure-entry)
            (reg proc))
            (goto (reg val)))))
            ((and (not (eq? target 'val)) (eq? linkage 'return))
            (error "return linkage, target not val - - COMPILE"
            target))))
    </SCHEME>
  </SNIPPET>
  <INDEX>compiler for Scheme<SUBINDEX><SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
      applications|)</SUBINDEX></INDEX>
  <INDEX>compiler for Scheme<SUBINDEX>combinations|)</SUBINDEX></INDEX>
      </TEXT>

    </SUBSECTION>
