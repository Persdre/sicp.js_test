  <SECTION>
    <NAME>The Metacircular Evaluator</NAME>

    <SECTIONCONTENT/>

    <LABEL NAME="sec:mc-eval"/>
    <INDEX>metacircular evaluator for Scheme|(</INDEX>

    <TEXT>
      Our evaluator for 
      <SPLITINLINE><SCHEME>Lisp</SCHEME><JAVASCRIPT>JavaScript</JAVASCRIPT></SPLITINLINE> 
      will be implemented as a 
      <SPLITINLINE><SCHEME>Lisp</SCHEME><JAVASCRIPT>JavaScript</JAVASCRIPT></SPLITINLINE> 
      program.  It may
      seem circular to think about evaluating 
      <SPLITINLINE><SCHEME>Lisp</SCHEME><JAVASCRIPT>JavaScript</JAVASCRIPT></SPLITINLINE> 
      programs using an
      evaluator that is itself implemented in 
      <SPLITINLINE><SCHEME>Lisp</SCHEME><JAVASCRIPT>JavaScript</JAVASCRIPT></SPLITINLINE>. 
      However, evaluation is a process, so it is appropriate to describe the evaluation process
      using <SPLITINLINE><SCHEME>Lisp</SCHEME><JAVASCRIPT>JavaScript</JAVASCRIPT></SPLITINLINE>, 
      which, after all, is our tool for describing
      processes.<FOOTNOTE>Even so, there will remain important aspects of
  the evaluation process that are not elucidated by our evaluator.  The
  most important of these are the detailed mechanisms by which
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
  call other
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
  and return values to their callers.
  We will address these issues in chapter<SPACE/>5, where we take a closer look
  at the evaluation process by implementing the evaluator as a simple
  register machine.</FOOTNOTE>  
      An evaluator that is written in the same language
      <INDEX>metacircular evaluator</INDEX><INDEX>evaluator<SUBINDEX>metacircular</SUBINDEX></INDEX>
      that it evaluates is said to be <EM>metacircular</EM>.
    </TEXT>

    <TEXT>
      <INDEX>environment model of evaluation<SUBINDEX>metacircular evaluator and</SUBINDEX></INDEX>
      <INDEX>metacircular evaluator for Scheme<SUBINDEX>environment model of evaluation in</SUBINDEX></INDEX>
      The metacircular evaluator is essentially a 
      <SPLITINLINE><SCHEME>Scheme</SCHEME><JAVASCRIPT>JavaScript</JAVASCRIPT></SPLITINLINE> formulation of the
      environment model of evaluation described in
      section<SPACE/><REF NAME="sec:environment-model"/>.  Recall that the model has 
      <SPLITINLINE><SCHEME>two</SCHEME><JAVASCRIPT>three</JAVASCRIPT></SPLITINLINE>
      basic parts:
    </TEXT>

    <SPLIT>
      <SCHEME>
  <TEXT>
    <OL>
      <LI> 
        To evaluate a combination (a compound expression other than a 
        special form), evaluate the subexpressions and then apply the value of
        the operator subexpression to the values of the operand
        subexpressions.
      </LI>
      <LI>
        To apply a compound procedure to a set of arguments, evaluate the
        body of the procedure in a new environment.  To construct this
        environment, extend the environment part of the procedure object by a
        frame in which the formal parameters of the procedure are bound to the
        arguments to which the procedure is applied.
      </LI>
    </OL>
  </TEXT>
      </SCHEME>
      <JAVASCRIPT>
  <TEXT>
    <OL>
      <LI> 
        To evaluate an operator combination,
        evaluate the subexpressions and then apply the 
        operator to the values of the 
        subexpressions.
      </LI>
      <LI> To evaluate a function application 
        combination, evaluate the function subexpression and the argument
        subexpressions, and then apply the value of
        the function subexpression to the values of the argument
        subexpressions.
      </LI>
      <LI> To apply a function to a set of arguments, evaluate the
        body of the function
        in a new environment.  To construct this
        environment, extend the environment part of the
        function object by a
        frame in which the formal parameters of the
        function are bound to the arguments to which the
        function
        is applied.
      </LI>
    </OL>
  </TEXT>
      </JAVASCRIPT>
    </SPLIT>

    <TEXT>
      <INDEX>metacircular evaluator for 
  Scheme<SUBINDEX>eval@<SCHEMEINLINE>eval</SCHEMEINLINE><ENDASH/><SCHEMEINLINE>apply</SCHEMEINLINE>
    cycle</SUBINDEX></INDEX>
      These <SPLITINLINE><SCHEME>two</SCHEME><JAVASCRIPT>three</JAVASCRIPT></SPLITINLINE> rules 
      describe the essence of the evaluation process, a basic cycle in which 
      <SPLITINLINE><SCHEME>expressions</SCHEME><JAVASCRIPT>statements</JAVASCRIPT></SPLITINLINE>
      to be evaluated in environments are
      reduced to
      <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
      to be applied to arguments, which in turn are
      reduced to new 
      <SPLITINLINE><SCHEME>expressions</SCHEME><JAVASCRIPT>statements</JAVASCRIPT></SPLITINLINE>
      to be evaluated in new environments, and so
      on, until we get down to symbols, whose values are looked
      up in the environment, and to 
      <SPLITINLINE><SCHEME>primitive procedures</SCHEME><JAVASCRIPT>operators</JAVASCRIPT></SPLITINLINE>, 
      which are applied directly (see Figure<SPACE/><REF NAME="fig:eval-apply"/>).<FOOTNOTE>If we grant 
  ourselves the ability to apply primitives,
  <INDEX>metacircular evaluator for Scheme<SUBINDEX>job of</SUBINDEX></INDEX>
  then what remains for us to implement in the evaluator?  The job of
  the evaluator is not to specify the primitives of the language, but rather
  to provide the connective tissue<EMDASH/>the means of combination and the
  means of abstraction<EMDASH/>that binds a collection of primitives to form a
  language.  Specifically:
  <UL>
    <LI>
      The evaluator enables us to deal with nested expressions. For
      example, although simply applying primitives would suffice for evaluating
      the <SPLITINLINE><SCHEME> expression <SCHEMEINLINE>(+ 1 6)</SCHEMEINLINE></SCHEME><JAVASCRIPT>statement <JAVASCRIPTINLINE>1 + 6;</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>, 
      it is not adequate for handling 
      <SPLITINLINE><SCHEME><SCHEMEINLINE>(+ 1 (* 2 3))</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>1 + (2 * 3);</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>.  
      As far as the primitive
      <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
      <SCHEMEINLINE>+</SCHEMEINLINE> is concerned,
      its arguments must be numbers, and it would choke if we passed it the
      expression <SPLITINLINE><SCHEME><SCHEMEINLINE>(* 2 3)</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>2 * 3</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> as an argument.
      One important role of the evaluator is to choreograph
      <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
      composition so that <SPLITINLINE><SCHEME><SCHEMEINLINE>(* 2 3)</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>2 * 3</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> is reduced to 6 before being passed as an argument to <SCHEMEINLINE>+</SCHEMEINLINE>.
    
    </LI>
    <LI>The evaluator allows us to use variables.  For example, the
      primitive
      <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
      for addition has no way to deal with expressions such
      as <SPLITINLINE><SCHEME><SCHEMEINLINE>(+ x 1)</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>x + 1</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>.  We need an evaluator to keep track of variables and
      obtain their values before invoking the primitive
      <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>.
      
    </LI>
    <LI>The evaluator allows us to define compound
      <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>.  This
      involves keeping track of
      <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
      definitions, knowing how to use
      these definitions in evaluating expressions, and providing a mechanism
      that enables
      <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
      to accept arguments.
      
    </LI>
    <LI>
      <SPLITINLINE><SCHEME>The evaluator provides the special forms, which must be
      evaluated differently from procedure calls.</SCHEME><JAVASCRIPT>The evaluator provides the
      other constructs of the language such as sequential composition and conditional expressions.
      </JAVASCRIPT></SPLITINLINE>

    </LI>
      </UL></FOOTNOTE>
      This evaluation cycle will be embodied by the interplay between the two
      critical
      <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
      in the evaluator, <SCHEMEINLINE>eval</SCHEMEINLINE> and <SCHEMEINLINE>apply</SCHEMEINLINE>,
      which are described in section<SPACE/><REF NAME="sec:core-of-evaluator"/>
      (see Figure<SPACE/><REF NAME="fig:eval-apply"/>).
    </TEXT>

    <TEXT>
      The implementation of the evaluator will depend upon
      <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
      that
      define the <EM>syntax</EM> of the expressions to be evaluated.  We will
      use
      <INDEX>metacircular evaluator for Scheme<SUBINDEX>data abstraction in</SUBINDEX></INDEX>
      data abstraction to make the evaluator independent of the
      representation of the language.  For example, rather than committing
      to a choice that an assignment is to be represented by a list
      beginning with the symbol <SPLITINLINE><SCHEME><SCHEMEINLINE>set!</SCHEMEINLINE></SCHEME><JAVASCRIPT>assignment</JAVASCRIPT></SPLITINLINE> we use an abstract predicate
      <SPLITINLINE>
	<SCHEME><SCHEMEINLINE>assignment?</SCHEMEINLINE></SCHEME>
	<JAVASCRIPT><JAVASCRIPTINLINE>is_assignment</JAVASCRIPTINLINE></JAVASCRIPT>
      </SPLITINLINE>
      to test for an assignment, and we use abstract
      selectors
      <SPLITINLINE>
	<SCHEME><SCHEMEINLINE>assignment-variable</SCHEMEINLINE></SCHEME>
	<JAVASCRIPT><JAVASCRIPTINLINE>assignment_name</JAVASCRIPTINLINE></JAVASCRIPT>
      </SPLITINLINE>
      and 
      <SPLITINLINE>
	<SCHEME><SCHEMEINLINE>assignment-value</SCHEMEINLINE></SCHEME>
	<JAVASCRIPT><JAVASCRIPTINLINE>assignment_right_hand_side</JAVASCRIPTINLINE></JAVASCRIPT>
      </SPLITINLINE>
      to
      access the parts of an assignment.  Implementation of expressions will
      be described in detail in section<SPACE/><REF NAME="sec:representing-expressions"/>.
      There are also operations, described in
      section<SPACE/><REF NAME="sec:eval-data-structures"/>, that specify the
      representation of
      <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
      and environments.  For example,
      <SPLITINLINE>
	<SCHEME><SCHEMEINLINE>make-procedure</SCHEMEINLINE></SCHEME>
	<JAVASCRIPT><JAVASCRIPTINLINE>make_function_object</JAVASCRIPTINLINE></JAVASCRIPT>
      </SPLITINLINE>
      constructs compound
      <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>, 
      <SPLITINLINE>
	<SCHEME><SCHEMEINLINE>lookup-variable-value</SCHEMEINLINE></SCHEME>
	<JAVASCRIPT><JAVASCRIPTINLINE>lookup_name_value</JAVASCRIPTINLINE></JAVASCRIPT>
      </SPLITINLINE>
      accesses the values of variables, 
      and
      <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>apply-primitive-procedure</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>apply_builtin_function</JAVASCRIPTINLINE>
      </JAVASCRIPT>
      </SPLITINLINE>
      applies a primitive
      <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
      to a given list of arguments.
    </TEXT>

    <!-- Subsection 1 : The Core of the Evaluator -->
    &subsection4.1.1;

    <!-- Subsection 2 : Representing Expressions -->
    &subsection4.1.2;

    <!-- Subsection 3 : Evaluator Data Structures -->
    &subsection4.1.3;

    <!-- Subsection 4 : Running the Evaluator as a Program -->
    &subsection4.1.4;
    
    <!-- Subsection 5 : Data as Programs -->
    &subsection4.1.5;

    <!-- Subsection 6 : Internal Definitions -->
    &subsection4.1.6;

    <!-- Subsection 7 : Separating Syntactic Analysis from Execution -->
    &subsection4.1.7;

  </SECTION>
