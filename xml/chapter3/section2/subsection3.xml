    <SUBSECTION> 
      <NAME>
        Frames as the Repository of Local State
      </NAME>

      <LABEL NAME="sec:env-local-state"/>
      <INDEX>frame (environment model)<SUBINDEX>as repository of local state|(</SUBINDEX></INDEX>
      <INDEX>local state<SUBINDEX>maintained in frames|(</SUBINDEX></INDEX>
      <INDEX>environment model of evaluation<SUBINDEX>local state|(</SUBINDEX></INDEX>

      <TEXT>
        <!-- \indcode{make-withdraw}[environment@in environment model|(] -->
        We can turn to the environment model to see how
        <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
        and
        assignment can be used to represent objects with local state.  As an
        example, consider the <QUOTE>withdrawal processor</QUOTE> from
        section<SPACE/><REF NAME="sec:local-state-variables"/> created by calling the
        <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>

        <SNIPPET EVAL="yes">
          <NAME>make_withdraw2</NAME>
          <SCHEME>
            (define (make-withdraw balance)
            (lambda (amount)
            (if (&gt;= balance amount)
            (begin (set! balance (- balance amount))
            balance)
            "Insufficient funds")))
          </SCHEME>
    <JAVASCRIPT>
function make_withdraw_with_balance(balance) {
    return amount => {
        if (balance &gt;= amount) {
            balance = balance - amount;
            return balance;
        } else {
            return "insufficient funds";
        }
    };
}
    </JAVASCRIPT>
        </SNIPPET>
      </TEXT>

      <TEXT>
        Let us describe the evaluation of

        <SNIPPET EVAL="yes">
          <REQUIRES>make_withdraw2</REQUIRES>
          <NAME>make_withdraw2_w1_declare</NAME>
          <SCHEME>
            (define W1 (make-withdraw 100))
          </SCHEME>
    <JAVASCRIPT>
const w1 = make_withdraw_with_balance(100);
    </JAVASCRIPT>
        </SNIPPET>

        followed by

        <SNIPPET EVAL="yes">
          <REQUIRES>make_withdraw2_w1_declare</REQUIRES>
          <NAME>make_withdraw2_w1_example</NAME>
          <SCHEME>
            (W1 50)
          </SCHEME>
          <JAVASCRIPT>
w1(50);
    </JAVASCRIPT>
          <SCHEMEOUTPUT>
            50
          </SCHEMEOUTPUT>
        </SNIPPET>
      </TEXT>

      <TEXT>
        Figure<SPACE/><REF NAME="fig:make-withdraw"/> shows the result of <SPLITINLINE><SCHEME>defining the <SCHEMEINLINE>make-withdraw</SCHEMEINLINE></SCHEME><JAVASCRIPT>declaring the <JAVASCRIPTINLINE>make_withdraw_with_balance</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
        <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
        in the <SPLITINLINE><SCHEME>global</SCHEME><JAVASCRIPT>program</JAVASCRIPT></SPLITINLINE> environment.  This produces a
        <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
        object that contains a pointer to the <SPLITINLINE><SCHEME>global</SCHEME><JAVASCRIPT>program</JAVASCRIPT></SPLITINLINE> environment.
        So far, this is no different from the examples we have already seen,
        except that the body of the
        <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
        is itself a <SPLITINLINE><SCHEME><SCHEMEINLINE>lambda</SCHEMEINLINE></SCHEME><JAVASCRIPT>function definition</JAVASCRIPT></SPLITINLINE>
        expression.

        <SPLIT>
          <SCHEME>
            <FIGURE>
              <FIGURE src="img_original/ch3-Z-G-7.svg"></FIGURE>
              <CAPTION>Result of defining <SCHEMEINLINE>make-withdraw</SCHEMEINLINE> in the <SPLITINLINE><SCHEME>global</SCHEME><JAVASCRIPT>program</JAVASCRIPT></SPLITINLINE> environment.</CAPTION>
              <LABEL NAME="fig:make-withdraw"/>
            </FIGURE>
          </SCHEME>
          <JAVASCRIPT>
            <FIGURE>
              <FIGURE src="img_javascript/ch3-Z-G-7.svg"></FIGURE>
              <CAPTION>Result of defining <JAVASCRIPTINLINE>make_withdraw_with_balance</JAVASCRIPTINLINE> in the <SPLITINLINE><SCHEME>global</SCHEME><JAVASCRIPT>program</JAVASCRIPT></SPLITINLINE> environment.</CAPTION>
              <LABEL NAME="fig:make-withdraw"/>
            </FIGURE>
          </JAVASCRIPT>
        </SPLIT>
      </TEXT>

      <TEXT>
        The interesting part of the computation happens when we 
        <SPLITINLINE><SCHEME>apply the procedure</SCHEME>
	<JAVASCRIPT>apply the function</JAVASCRIPT></SPLITINLINE>
	<SNIPPET>
	  <SCHEME>
	    make-withdraw
	  </SCHEME>
	  <JAVASCRIPT>
            make_withdraw_with_balance
	  </JAVASCRIPT>
	</SNIPPET>
to an argument:

        <SNIPPET EVAL="no">
          <SCHEME>
            (define W1 (make-withdraw 100))
          </SCHEME>
    <JAVASCRIPT>
const w1 = make_withdraw_with_balance(100);
          </JAVASCRIPT>
</SNIPPET> 
      </TEXT>

      <TEXT>
        We begin, as usual, by setting up an environment E1 in which the
        formal parameter <SCHEMEINLINE>balance</SCHEMEINLINE> is bound to the argument 100.  Within
        this environment, we evaluate the body of <SPLITINLINE><SCHEME><SCHEMEINLINE>make-withdraw</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>make_withdraw_with_balance</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>, namely
        the <SPLITINLINE><SCHEME><SCHEMEINLINE>lambda</SCHEMEINLINE></SCHEME><JAVASCRIPT>function definition</JAVASCRIPT></SPLITINLINE> expression.  This constructs a new
        <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
        object,
        whose code is as specified by the <SPLITINLINE><SCHEME><SCHEMEINLINE>lambda</SCHEMEINLINE></SCHEME><JAVASCRIPT>function definition</JAVASCRIPT></SPLITINLINE> and whose environment
        is E1, the environment in which the <SPLITINLINE><SCHEME><SCHEMEINLINE>lambda</SCHEMEINLINE></SCHEME><JAVASCRIPT>function definition</JAVASCRIPT></SPLITINLINE> was evaluated to
        produce the
        <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>.  The resulting
        <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
        object is the value
        returned by the call to <SPLITINLINE><SCHEME><SCHEMEINLINE>make-withdraw</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>make_withdraw_with_balance</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>.  This is bound to 
  <SPLITINLINE><SCHEME><SCHEMEINLINE>W1</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>w1</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> in the <SPLITINLINE><SCHEME>global</SCHEME><JAVASCRIPT>program</JAVASCRIPT></SPLITINLINE> environment, since the <SPLITINLINE><SCHEME><SCHEMEINLINE>define</SCHEMEINLINE></SCHEME><JAVASCRIPT>constant declaration</JAVASCRIPT></SPLITINLINE> itself is being
        evaluated in the <SPLITINLINE><SCHEME>global</SCHEME><JAVASCRIPT>program</JAVASCRIPT></SPLITINLINE> environment.  Figure<SPACE/><REF NAME="fig:w1"/> shows the
        resulting environment structure.

        <SPLIT>
          <SCHEME>
            <FIGURE>
              <FIGURE src="img_original/ch3-Z-G-8.svg"></FIGURE>
              <CAPTION>Result of evaluating <SCHEMEINLINE>(define W1 (make-withdraw 100))</SCHEMEINLINE>.</CAPTION>
              <LABEL NAME="fig:w1"/>
            </FIGURE>
          </SCHEME>
          <JAVASCRIPT>
            <FIGURE>
              <FIGURE src="img_javascript/ch3-Z-G-8.svg"></FIGURE>
              <CAPTION>Result of evaluating <SPLITINLINE><SCHEME><SCHEMEINLINE>(define W1 (make-withdraw 100))</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>const w1 = make_withdraw_with_balance(100);</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>.</CAPTION>
              <LABEL NAME="fig:w1"/>
            </FIGURE>
          </JAVASCRIPT>
        </SPLIT>
      </TEXT>

      <TEXT>
        Now we can analyze what happens when 
<SPLITINLINE><SCHEME><SCHEMEINLINE>W1</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>w1</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
is applied to an
        argument:

        <SNIPPET EVAL="no">
          <SCHEME>
            (W1 50)
          </SCHEME>
          <JAVASCRIPT>
w1(50);
    </JAVASCRIPT>
          <SCHEMEOUTPUT>
            50
          </SCHEMEOUTPUT>
        </SNIPPET>
      </TEXT>

      <TEXT>
        We begin by constructing a frame in which <SCHEMEINLINE>amount</SCHEMEINLINE>, the formal
        parameter of <SPLITINLINE><SCHEME><SCHEMEINLINE>W1</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>w1</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>, is bound to the argument 50.  The crucial point
        to observe is that this frame has as its enclosing environment not the
        <SPLITINLINE><SCHEME>global</SCHEME><JAVASCRIPT>program</JAVASCRIPT></SPLITINLINE> environment, but rather the environment E1, because this is the
        environment that is specified by the <SPLITINLINE><SCHEME><SCHEMEINLINE>W1</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>w1</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
        <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
        object.
        Within this new environment, we evaluate the body of the
        <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>:

        <SNIPPET EVAL="no">
          <SCHEME>
            (if (&gt;= balance amount)
            (begin (set! balance (- balance amount))
            balance)
            "Insufficient funds")
          </SCHEME>
          <JAVASCRIPT>
if (balance &gt;= amount) {
    balance = balance - amount;
    return balance;
} else {
    return "insufficient funds";
}
          </JAVASCRIPT>
        </SNIPPET>
      </TEXT>

      <TEXT>
        The resulting environment structure is shown in
        Figure<SPACE/><REF NAME="fig:apply-w1"/>.  The expression being evaluated references
        both <SCHEMEINLINE>amount</SCHEMEINLINE> and <SCHEMEINLINE>balance</SCHEMEINLINE>.  <SPLITINLINE><SCHEME><SCHEMEINLINE>Amount</SCHEMEINLINE></SCHEME><JAVASCRIPT>The variable <JAVASCRIPTINLINE>amount</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> will be found in
        the first frame in the environment, while <SCHEMEINLINE>balance</SCHEMEINLINE> will be found
        by following the enclosing-environment pointer to E1.

      <SPLIT>
        <SCHEME>
          <FIGURE>
            <FIGURE src="img_original/ch3-Z-G-9.svg"></FIGURE>
            <CAPTION>Environments created by applying the procedure object <SCHEMEINLINE>W1</SCHEMEINLINE>.</CAPTION>
            <LABEL NAME="fig:apply-w1"/>
          </FIGURE>
        </SCHEME>
        <JAVASCRIPT>
          <FIGURE>
            <FIGURE src="img_javascript/ch3-Z-G-9.svg"></FIGURE>
            <CAPTION>Environments created by applying the function object <JAVASCRIPTINLINE>w1</JAVASCRIPTINLINE>.</CAPTION>
            <LABEL NAME="fig:apply-w1"/>
          </FIGURE>
        </JAVASCRIPT>
      </SPLIT>
      </TEXT>

      <TEXT>
        When the <SPLITINLINE><SCHEME><SCHEMEINLINE>set!</SCHEMEINLINE></SCHEME><JAVASCRIPT>assignment</JAVASCRIPT></SPLITINLINE> is executed, the binding of <SCHEMEINLINE>balance</SCHEMEINLINE> in E1 is changed.  At the completion of the call to <SPLITINLINE><SCHEME><SCHEMEINLINE>W1</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>w1</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>,
        <SCHEMEINLINE>balance</SCHEMEINLINE> is 50, and the frame that contains <SCHEMEINLINE>balance</SCHEMEINLINE>
        is still pointed to by the
        <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
        object <SPLITINLINE><SCHEME><SCHEMEINLINE>W1</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>w1</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>.  The frame
        that binds <SCHEMEINLINE>amount</SCHEMEINLINE>
        (in which we executed the code that changed <SCHEMEINLINE>balance</SCHEMEINLINE>) is no longer
        relevant, since the
        <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
        call that constructed it has terminated,
        and there are no pointers to that frame from other parts of the
        environment.  The next time <SPLITINLINE><SCHEME><SCHEMEINLINE>W1</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>w1</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> is called, this will build a new
        frame that binds <SCHEMEINLINE>amount</SCHEMEINLINE> and whose enclosing environment is E1.
        We see that E1 serves as the <QUOTE>place</QUOTE> that holds the local state
        variable for the
        <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
        object <SPLITINLINE><SCHEME><SCHEMEINLINE>W1</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>w1</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>.  Figure<SPACE/><REF NAME="fig:after-w1"/>
        shows the situation after the call to <SCHEMEINLINE>W1</SCHEMEINLINE>.

        <SPLIT>
          <SCHEME>
            <FIGURE>
              <FIGURE src="img_original/ch3-Z-G-10.svg"></FIGURE>
              <CAPTION>Environments after the call to <SCHEMEINLINE>W1</SCHEMEINLINE>.</CAPTION>
              <LABEL NAME="fig:after-w1"/>
            </FIGURE>
          </SCHEME>
          <JAVASCRIPT>
            <FIGURE>
              <FIGURE src="img_javascript/ch3-Z-G-10.svg"></FIGURE>
              <CAPTION>Environments after the call to <JAVASCRIPTINLINE>w1</JAVASCRIPTINLINE>.</CAPTION>
              <LABEL NAME="fig:after-w1"/>
            </FIGURE>
          </JAVASCRIPT>
        </SPLIT>
      </TEXT>

      <TEXT>
        Observe what happens when we create a second <QUOTE>withdraw</QUOTE> object by
        making another call to <SPLITINLINE><SCHEME><SCHEMEINLINE>make_withdraw</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>make_withdraw</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>:

        <SNIPPET EVAL="yes">
          <REQUIRES>make_withdraw2</REQUIRES>
          <NAME>make_withdraw2_w2_declare</NAME>
          <SCHEME>
            (define W2 (make-withdraw 100))
          </SCHEME>
          <JAVASCRIPT>
const w2 = make_withdraw(100);
          </JAVASCRIPT>
        </SNIPPET>
      </TEXT>

      <TEXT>
        This produces the environment structure of Figure<SPACE/><REF NAME="fig:w2"/>, which shows
        that <SPLITINLINE><SCHEME><SCHEMEINLINE>W2</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>w2</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> is a
        <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
        object, that is, a pair with some code
        and an environment.  The environment E2 for <SPLITINLINE><SCHEME><SCHEMEINLINE>W2</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>w2</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> was created by
        the call to <SPLITINLINE><SCHEME><SCHEMEINLINE>make-withdraw</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>make_withdraw</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>.  It contains a frame with its own
        local binding for <SCHEMEINLINE>balance</SCHEMEINLINE>.  On the other hand, <SPLITINLINE><SCHEME><SCHEMEINLINE>W1</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>w1</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> and <SPLITINLINE><SCHEME><SCHEMEINLINE>W2</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>w2</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> have the same code: the code specified by the <SPLITINLINE><SCHEME><SCHEMEINLINE>lambda</SCHEMEINLINE></SCHEME><JAVASCRIPT>function definition</JAVASCRIPT></SPLITINLINE> expression in the body of <SPLITINLINE><SCHEME><SCHEMEINLINE>make-withdraw</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>make_withdraw</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>.<FOOTNOTE>Whether
          <SPLITINLINE><SCHEME><SCHEMEINLINE>W1</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>w1</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> and <SPLITINLINE><SCHEME><SCHEMEINLINE>W2</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>w2</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> share the same physical code stored in the
          computer, or whether they each keep a copy of the code, is a detail of
          the implementation.  For the interpreter we implement in chapter<SPACE/>4,
          the code is in fact shared.</FOOTNOTE> We see here why 
<SPLITINLINE><SCHEME><SCHEMEINLINE>W1</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>w1</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> and <SPLITINLINE><SCHEME><SCHEMEINLINE>W2</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>w2</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
        behave as independent objects.  Calls to <SPLITINLINE><SCHEME><SCHEMEINLINE>W1</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>w1</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> reference the state
        variable <SCHEMEINLINE>balance</SCHEMEINLINE> stored in E1, whereas calls to 
<SPLITINLINE><SCHEME><SCHEMEINLINE>W2</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>w2</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
        reference the <SCHEMEINLINE>balance</SCHEMEINLINE> stored in E2. Thus, changes to the local
        state of one object do not affect the other object.

        <SPLIT>
          <SCHEME>
            <FIGURE>
              <FIGURE src="img_original/ch3-Z-G-11.svg"></FIGURE>
              <CAPTION>Using <SCHEMEINLINE>(define W2 (make-withdraw 100))</SCHEMEINLINE> to create a second object.</CAPTION>
              <LABEL NAME="fig:w2"/>
            </FIGURE>
          </SCHEME>
          <JAVASCRIPT>
            <FIGURE>
              <FIGURE src="img_javascript/ch3-Z-G-11.svg"></FIGURE>
              <CAPTION>Using <JAVASCRIPTINLINE>const w2 = make_withdraw_with_balance(100)</JAVASCRIPTINLINE> to create a second object.</CAPTION>
              <LABEL NAME="fig:w2"/>
            </FIGURE>
          </JAVASCRIPT>
        </SPLIT>
      </TEXT>

      <EXERCISE>
        In the <SPLITINLINE><SCHEME><SCHEMEINLINE>make-withdraw</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>make_withdraw</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
        <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>, the local variable <SCHEMEINLINE>balance</SCHEMEINLINE>
        is created as a parameter of <SPLITINLINE><SCHEME><SCHEMEINLINE>make-withdraw</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>make_withdraw</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>.  We could also
        create the local state variable explicitly, using 
<SPLITINLINE><SCHEME><SCHEMEINLINE>let</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>let</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>, as
        follows:
            <!-- \indcode*{make-withdraw}[using <SCHEMEINLINE>let</SCHEMEINLINE>] -->
        <SNIPPET EVAL="yes">
          <NAME>make_withdraw3</NAME>
          <SCHEME>
            (define (make-withdraw initial-amount)
            (let ((balance initial-amount))
            (lambda (amount)
            (if (&gt;= balance amount)
            (begin (set! balance (- balance amount))
            balance)
            "Insufficient funds"))))
          </SCHEME>
          <JAVASCRIPT>
function make_withdraw(initial_amount) {
    let balance = initial_amount;
    function withdraw(amount) {
        if (balance &gt;= amount) {
            balance = balance - amount;
            return balance;
        } else {
            return "insufficient funds";
        }
    }
    return withdraw;
}
    </JAVASCRIPT>
        </SNIPPET>

        <!--\indsf{let}[syntactic@as syntactic sugar]-->
        <!--\indsf{let}[evaluation model]-->
<SPLIT>
<SCHEME>
        Recall from section<SPACE/><REF NAME="sec:lambda"/> that 
        <SCHEMEINLINE>let</SCHEMEINLINE>
        is simply syntactic sugar for a
        <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
        call:

        <SNIPPET EVAL="no">
          <SCHEME>
            (let ((^var^ ^exp^)) ^body^)
          </SCHEME>
        </SNIPPET>

        is interpreted as an alternate syntax for

        <SNIPPET EVAL="no">
          <SCHEME>
            ((lambda (^var^) ^body^) ^exp^)
          </SCHEME>
        </SNIPPET>
</SCHEME>
</SPLIT>
        Use the environment model to analyze this alternate
        version of <SCHEMEINLINE>make_withdraw</SCHEMEINLINE>, drawing figures like the ones above to
        illustrate the interactions

        <SNIPPET EVAL="yes">
          <REQUIRES>make_withdraw3</REQUIRES>
          <SCHEME>
            (define W1 (make-withdraw 100))

            (W1 50)

            (define W2 (make-withdraw 100))
          </SCHEME>
          <JAVASCRIPT>
const w1 = make_withdraw(100);
w1(50);
const w2 = make_withdraw(100);
    </JAVASCRIPT>
        </SNIPPET>

        Show that the two versions of <SPLITINLINE><SCHEME><SCHEMEINLINE>make-withdraw</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>make_withdraw</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> create objects with
        the same behavior.  How do the environment structures differ for the two
        versions?
        <LABEL NAME="ex:local-state-variable"/>
      </EXERCISE>

      <INDEX>frame (environment model)<SUBINDEX>as repository of local state|)</SUBINDEX></INDEX>
      <INDEX>local state<SUBINDEX>maintained in frames|)</SUBINDEX></INDEX>
      <INDEX>environment model of evaluation<SUBINDEX>local state|)</SUBINDEX></INDEX>
      <!-- \indcode{make-withdraw}[environment@in environment model|)] -->

    </SUBSECTION>
