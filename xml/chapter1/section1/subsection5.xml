      <SUBSECTION>
        <LABEL NAME="sec:substitution-model"></LABEL>
        <INDEX>substitution model of procedure application</INDEX>
        <NAME>
          The Substitution Model for 
          <SPLITINLINE>
            <SCHEME>
              Procedure
            </SCHEME>
            <JAVASCRIPT>
              Function
            </JAVASCRIPT>
        </SPLITINLINE>
          Application
        </NAME>

        <SPLIT>
          <SCHEME>
            <TEXT>
              To evaluate a combination whose operator names a compound procedure, the
              interpreter follows much the same process as for combinations whose
              operators name primitive procedures, which we described in
              section <REF NAME="sec:evaluating-combinations"/>.
              That is, the interpreter
              evaluates the elements of the combination and applies the procedure
              (which is the value of the operator of the combination) to the
              arguments (which are the values of the operands of the combination).
            </TEXT>
          </SCHEME>
          <JAVASCRIPT>
            <TEXT>
              To evaluate an application combination,
              the interpreter follows a similar process as for operator
	      combinations,
              which we described in
              section <REF NAME="sec:evaluating-combinations"/>.
              That is, the interpreter evaluates the elements of the combination
	      and applies the function (which is the value of the
	      function expression)
	      to the arguments
              (which are the values of the argument expressions of
	      the application combination).
            </TEXT>
          </JAVASCRIPT>
        </SPLIT>

        <SPLIT>
          <SCHEME>
            <TEXT>
              We can assume that the mechanism for applying primitive procedures to
              arguments is built into the interpreter.  For compound procedures, the
              application process is as follows:
              <UL>
                <LI>
                  To apply a compound procedure to arguments, evaluate the body of the
                  procedure with each formal parameter replaced by the corresponding
                  argument.
                </LI>
              </UL>
              To illustrate this process, let<APOS/>s evaluate the combination
              <SNIPPET>
                <REQUIRES>f</REQUIRES>
                <SCHEME>
(f 5)
                </SCHEME>
              </SNIPPET>
              where <SCHEMEINLINE>f</SCHEMEINLINE> is the procedure defined in
              section <REF NAME="sec:compound-procedures"/>.
              We begin by retrieving the
              body of <SCHEMEINLINE>f</SCHEMEINLINE>:
              <SNIPPET EVAL="no">
                <REQUIRES>f</REQUIRES>
                <SCHEME>
(sum-of-squares (+ a 1) (* a 2))
                </SCHEME>
              </SNIPPET>
              Then we replace the parameter <SCHEMEINLINE>a</SCHEMEINLINE> 
              by the argument 5:
              <SNIPPET EVAL="no">
                <SCHEME>
(sum-of-squares (+ 5 1) (* 5 2))
                </SCHEME>
              </SNIPPET>
            </TEXT>
          </SCHEME>
          <JAVASCRIPT>
            <TEXT>
              In more detail, the interpreter proceeds
	      as follows when
	      evaluating application combinations:
              <UL>
                <LI>
              To evaluate an application combination of the form
              <SNIPPET EVAL="no" LATEX="yes">
                <JAVASCRIPT>
$\textit{function-expression}$ ( $\textit{argument-expressions}$ )
		</JAVASCRIPT>
	      </SNIPPET>
              do the following:
              <OL>
		<LI>Evaluate the function expression 
		of the application
		combination, resulting in the function to be applied.</LI>
                <LI>Evaluate the argument expressions of the combination.</LI>
                <LI>Apply the function to the arguments:
		<UL>
		  <LI>If the function is primitive, we simply apply the 
		  corresponding mathematical function to the arguments.
		  </LI>
		  <LI>If the function is compound, we evaluate the return
		  expression of the function with each parameter replaced
		  by the corresponding argument.
		  </LI>
		</UL>
		</LI>
              </OL>
                </LI>
              </UL>
              To illustrate this process, 
              let<APOS/>s evaluate the application combination
              <SNIPPET>
                <REQUIRES>f</REQUIRES>
                <JAVASCRIPT>
f(5);
                </JAVASCRIPT>
              </SNIPPET>
              Evaluating the name <JAVASCRIPTINLINE>f</JAVASCRIPTINLINE>
	      results in the function declared in
              section <REF NAME="sec:compound-procedures"/>.
	      Evaluating the argument expression
	      <JAVASCRIPTINLINE>5</JAVASCRIPTINLINE> yields the
	      argument value 5.
              Now, we retrieve the return
              expression of
              <JAVASCRIPTINLINE>f</JAVASCRIPTINLINE>:
              <SNIPPET EVAL="no">
                <REQUIRES>f</REQUIRES>
                <JAVASCRIPT>
sum_of_squares(a + 1, a * 2)
                </JAVASCRIPT>
              </SNIPPET>
              in which we replace the parameter
	      <JAVASCRIPTINLINE>a</JAVASCRIPTINLINE>
              by the argument 5:
              <SNIPPET EVAL="no">
                <JAVASCRIPT>
sum_of_squares(5 + 1, 5 * 2)
                </JAVASCRIPT>
              </SNIPPET>
            </TEXT>
          </JAVASCRIPT>
        </SPLIT>

        <SPLIT>
          <SCHEME>
            <TEXT>
              Thus the problem reduces to the evaluation of a combination with 
	      two operands and an operator <SCHEMEINLINE>sum-of-squares</SCHEMEINLINE>.  
              Evaluating this
              combination involves three subproblems.  We must evaluate the
              operator to get the procedure to be applied, and we must evaluate the
              operands to get the arguments.  
              Now <SCHEMEINLINE>(+ 5 1)</SCHEMEINLINE> produces 6 and
              <SCHEMEINLINE>(* 5 2)</SCHEMEINLINE> produces 10, so we must apply the
              <SCHEMEINLINE>sum-of-squares</SCHEMEINLINE> procedure to 6 and 10.  
              These values are substituted
              for the formal parameters <SCHEMEINLINE>x</SCHEMEINLINE> and 
              <SCHEMEINLINE>y</SCHEMEINLINE> in the body of 
              <SCHEMEINLINE>sum-of-squares</SCHEMEINLINE>,
              reducing the expression to
              <SNIPPET EVAL="no">
                <SCHEME>
(+ (square 6) (square 10))
                </SCHEME>
              </SNIPPET>
              If we use the definition of <SCHEMEINLINE>square</SCHEMEINLINE>, 
              this reduces to
              <SNIPPET EVAL="no">
                <SCHEME>
(+ (* 6 6) (* 10 10))
                </SCHEME>
              </SNIPPET>
              which reduces by multiplication to
              <SNIPPET EVAL="no">
                <SCHEME>
(+ 36 100)
                </SCHEME>
              </SNIPPET>
              and finally to
              <SNIPPET EVAL="no">
                <SCHEME>
136
                </SCHEME>
              </SNIPPET>
            </TEXT>
          </SCHEME>
          <JAVASCRIPT>
            <TEXT>
              Thus the problem reduces to the evaluation of an application
	      combination with two arguments
              and a function expression
	      <JAVASCRIPTINLINE>sum_of_squares</JAVASCRIPTINLINE>.
              Evaluating this combination involves three subproblems.
	      We must evaluate the
              function expression to get the function to be applied,
	      and we must evaluate the argument expressions to get the arguments.  
              Now <JAVASCRIPTINLINE>5 + 1</JAVASCRIPTINLINE> produces 6 and
              <JAVASCRIPTINLINE>5 * 2</JAVASCRIPTINLINE> produces 10, 
              so we must apply the
              <JAVASCRIPTINLINE>sum_of_squares</JAVASCRIPTINLINE> function 
              to 6 and 10.  
              These values are substituted
              for the parameters <JAVASCRIPTINLINE>x</JAVASCRIPTINLINE> and 
              <JAVASCRIPTINLINE>y</JAVASCRIPTINLINE> in the return
	      expression of 
              <JAVASCRIPTINLINE>sum_of_squares</JAVASCRIPTINLINE>,
              reducing the expression to
              <SNIPPET EVAL="no">
                <JAVASCRIPT>
square(6) + square(10)
                </JAVASCRIPT>
              </SNIPPET>
              If we use the declaration of
	      <JAVASCRIPTINLINE>square</JAVASCRIPTINLINE> once, 
              this reduces to
              <SNIPPET EVAL="no">
                <JAVASCRIPT>
(6 * 6) + square(10)
                </JAVASCRIPT>
              </SNIPPET>
              which reduces by multiplication to
              <SNIPPET EVAL="no">
                <JAVASCRIPT>
36 + square(10)
                </JAVASCRIPT>
              </SNIPPET>
              A second application of
	      <JAVASCRIPTINLINE>square</JAVASCRIPTINLINE> yields
              <SNIPPET EVAL="no">
                <JAVASCRIPT>
36 + (10 * 10)
                </JAVASCRIPT>
              </SNIPPET>
	      which reduces by multiplication to
              <SNIPPET EVAL="no">
                <JAVASCRIPT>
36 + 100
                </JAVASCRIPT>
              </SNIPPET>
	      and finally by addition to
              <SNIPPET EVAL="no">
                <JAVASCRIPT>
136
                </JAVASCRIPT>
              </SNIPPET>
            </TEXT>
          </JAVASCRIPT>
        </SPLIT>

        <TEXT>
              The process we have just described is called the <EM>substitution
                model</EM> for 
              <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT>
              </SPLITINLINE> 
              application.  It can be taken as a model that
              determines the <QUOTE>meaning</QUOTE> of 
              <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT>
              </SPLITINLINE> 
              application, insofar as the
              <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT>
              </SPLITINLINE> 
              in this chapter are concerned.  However, there are two
              points that should be stressed:
              <UL>
                <LI>
                  The purpose of the substitution is to help us think about
                  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT>
                  </SPLITINLINE> 
                  application, not to provide a description of how
                  the interpreter really works.  Typical interpreters
		  do not evaluate
                  <SPLITINLINE>
		    <SCHEME>procedure</SCHEME>
		    <JAVASCRIPT>function</JAVASCRIPT>
                  </SPLITINLINE>  
                  applications by manipulating the text of a 
                  <SPLITINLINE>
		    <SCHEME>procedure to substitute values for the formal</SCHEME>
		    <JAVASCRIPT>function to substitute values for the</JAVASCRIPT>
                  </SPLITINLINE> 
                  parameters.
		  In practice, the
                  <QUOTE>substitution</QUOTE> is accomplished by using
		  a local environment for the
                  <SPLITINLINE>
		    <SCHEME>formal parameters.
		    </SCHEME>
		    <JAVASCRIPT>parameters.
		    </JAVASCRIPT>
		  </SPLITINLINE>
		  We will discuss this more fully in chapters 3 and
                  4 when we examine the implementation of an interpreter in detail.
                </LI>
                <LI>
                  Over the course of this book, we will present a sequence of
                  increasingly elaborate models of how interpreters work,
		  culminating
                  with a complete implementation of an interpreter and compiler in
                  chapter<SPACE/>5.  The substitution model is only the first of
		  these models<EMDASH/>a way to get started thinking formally
		  about the evaluation process.  In general, when 
                  <INDEX>modeling<SUBINDEX>in science and engineering</SUBINDEX></INDEX>
                  modeling phenomena in science and
                  engineering, we begin with simplified, incomplete models.  As we
                  examine things in greater detail, these simple models become
                  inadequate and must be replaced by more refined models.  The
                  substitution model is no exception.  In particular, when we
		  address in chapter<SPACE/>3 the use of 
                  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT>
                  </SPLITINLINE> 
                  with <QUOTE>mutable data,</QUOTE> we will see that
                  the substitution model breaks down and must be replaced by
		  a more complicated model of 
                  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT>
                  </SPLITINLINE> 
                  application.<FOOTNOTE>Despite the
                  simplicity of the substitution idea, it turns out to be
		  surprisingly complicated to give a rigorous mathematical
		  definition of the substitution process.  The problem arises
		  from the possibility of confusion between the names used for the 
                  <SPLITINLINE><SCHEME>formal parameters of a procedure</SCHEME>
		  <JAVASCRIPT>parameters of a function</JAVASCRIPT>
                  </SPLITINLINE> 
                  and the (possibly identical) names used in the expressions
                  to which the 
                  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT>
                  </SPLITINLINE> 
                  may be applied.  Indeed, there is a long
                  history of erroneous definitions of <EM>substitution</EM> in the
                  literature of logic and programming semantics.  
                  <INDEX>Stoy, Joseph E.</INDEX>
                  See <CITATION>Stoy 1977</CITATION> for a
                  careful discussion of substitution.
                </FOOTNOTE>
                </LI>
              </UL>
            </TEXT>

        <SUBHEADING> 
          <NAME>Applicative order versus normal order</NAME>
        </SUBHEADING>

        <SPLIT>
          <SCHEME>
            <TEXT>
              According to the description of evaluation given in
              section <REF NAME="sec:evaluating-combinations"/>, the interpreter first
              evaluates the operator and operands and then applies the resulting procedure
              to the resulting arguments.  This is not the only way to perform
              evaluation.  An alternative evaluation model would not evaluate the
              operands until their values were needed.  Instead it would first substitute
              operand expressions for parameters until
              it obtained an expression involving only primitive operators, and
              would then perform the evaluation.  If we used this method, the
              evaluation of
              <SNIPPET EVAL="no">
                <SCHEME>
(f 5)
                </SCHEME>
              </SNIPPET>
              would proceed according to the sequence of expansions
              <SNIPPET EVAL="no">
                <SCHEME>
(sum-of-squares (+ 5 1) (* 5 2))

(+  (square (+ 5 1))     (square (* 5 2))  )

(+  (* (+ 5 1) (+ 5 1))  (* (* 5 2) (* 5 2)))
                </SCHEME>
              </SNIPPET>
              followed by the reductions
              <SNIPPET EVAL="no">
                <SCHEME>
(+        (* 6 6)            (* 10 10))

(+          36                  100)

                    136
                </SCHEME>
              </SNIPPET>
              This gives the same answer as our previous evaluation model, but the
              process is different.  In particular, the evaluations
              of <SCHEMEINLINE>(+ 5 1)</SCHEMEINLINE> and 
              <SCHEMEINLINE>(* 5 2)</SCHEMEINLINE> are each performed twice here,
              corresponding to the reduction of the expression
              <SNIPPET EVAL="no">
                <SCHEME>
(* x x)
                </SCHEME>
              </SNIPPET>
              with <SCHEMEINLINE>x</SCHEMEINLINE> replaced respectively 
              by <SCHEMEINLINE>(+ 5 1)</SCHEMEINLINE> and <SCHEMEINLINE>(* 5 2)</SCHEMEINLINE>.
            </TEXT>
          </SCHEME>
          <JAVASCRIPT>
            <TEXT>
              According to the description of evaluation given above,
	      the interpreter first
              evaluates the function and argument expressions and then applies
	      the resulting function
              to the resulting arguments.  This is not the only way to perform
              evaluation.  An alternative evaluation model would not evaluate the
              operands until their values were needed.  Instead it would first
	      substitute argument expressions for parameters until
              it obtained an expression involving only operators, and
              would then perform the evaluation.  If we used this method, the
              evaluation of
              <SNIPPET EVAL="no">
                <JAVASCRIPT>
f(5)
                </JAVASCRIPT>
              </SNIPPET>
              would proceed according to the sequence of expansions
              <SNIPPET EVAL="no" LATEX="yes">
                <JAVASCRIPT>
sum_of_squares(5 + 1, 5 * 2)
square(5 + 1)  +  square(5 * 2)
(5 + 1) * (5 + 1) + square(5 * 2)
(5 + 1) * (5 + 1) + (5 * 2) * (5 * 2)
                </JAVASCRIPT>
              </SNIPPET>
              followed by the reductions
              <SNIPPET EVAL="no" LATEX="yes">
                <JAVASCRIPT>
6 * (5 + 1) + (5 * 2) * (5 * 2)
6 * 6 + (5 * 2) * (5 * 2)
36 + (5 * 2) * (5 * 2)
36 + 10 * (5 * 2)
36 + 10 * 10
36 + 100
136
                </JAVASCRIPT>
              </SNIPPET>
              This gives the same answer as our previous evaluation model, but the
              process is different.  In particular, the evaluations
              of <JAVASCRIPTINLINE>5 + 1</JAVASCRIPTINLINE> and 
              <JAVASCRIPTINLINE>5 * 2</JAVASCRIPTINLINE> are each performed
	      twice here,
              corresponding to the reduction of the expression
              <SNIPPET EVAL="no">
                <JAVASCRIPT>
x * x
                </JAVASCRIPT>
              </SNIPPET>
              with <JAVASCRIPTINLINE>x</JAVASCRIPTINLINE> replaced respectively 
              by <JAVASCRIPTINLINE>5 + 1</JAVASCRIPTINLINE> 
              and <JAVASCRIPTINLINE>5 * 2</JAVASCRIPTINLINE>.
            </TEXT>
          </JAVASCRIPT>
        </SPLIT>

        <TEXT>
          This alternative <QUOTE>fully expand and then reduce</QUOTE>
	  evaluation method is
          known as 
              <INDEX>normal-order evaluation</INDEX>
              <EM>normal-order evaluation</EM>, in contrast to the <QUOTE>evaluate
                the arguments and then apply</QUOTE> method that the interpreter actually
              uses, which is called 
              <INDEX>applicative-order evaluation</INDEX>
              <EM>applicative-order evaluation</EM>.  It can be
              shown that, for 
              <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT>
              </SPLITINLINE>
              applications that can be modeled using
              substitution (including all the 
              <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT>
              </SPLITINLINE>
              in the first two chapters
              of this book) and that yield legitimate values, normal-order and
              applicative-order evaluation produce the same value.  (See
              exercise<SPACE/><REF NAME="ex:normal-order-vs-appl-order-test"/>
	      for an instance of
              an <QUOTE>illegitimate</QUOTE> value where normal-order and
	      applicative-order evaluation do not give the same result.)
        </TEXT>

        <TEXT>
          <SPLIT>
            <SCHEME>
              <INDEX>applicative-order evaluation
	      <SUBINDEX><ORDER>Lisp</ORDER>in Lisp</SUBINDEX></INDEX>
              <INDEX>Lisp<SUBINDEX>applicative-order evaluation in</SUBINDEX></INDEX>
	    </SCHEME>
	    <JAVASCRIPT>
	      <INDEX>applicative-order evaluation
	      <SUBINDEX><ORDER>JavaScript</ORDER>in JavaScript</SUBINDEX></INDEX>
              <INDEX>JavaScript
	      <SUBINDEX>applicative-order evaluation in</SUBINDEX></INDEX>
	    </JAVASCRIPT>
	  </SPLIT>
            <SPLITINLINE><SCHEME>Lisp</SCHEME>
	    <JAVASCRIPT>JavaScript</JAVASCRIPT>
	    </SPLITINLINE>
	    uses applicative-order evaluation, partly because of the
            additional efficiency obtained from avoiding multiple evaluations of
            expressions such as those illustrated with
	    <SPLITINLINE>
	      <SCHEME>
		<SCHEMEINLINE>(+ 5 1)</SCHEMEINLINE> 
		and <SCHEMEINLINE>(* 5 2)</SCHEMEINLINE>
		<JAVASCRIPT>
		  <JAVASCRIPTINLINE>5 + 1</JAVASCRIPTINLINE> 
		  and <JAVASCRIPTINLINE>5 * 2</JAVASCRIPTINLINE>
		</JAVASCRIPT>
	      </SCHEME>
	    </SPLITINLINE>
	    above and, more significantly, because normal-order evaluation
            becomes much more complicated to deal with when we leave the realm of
            procedures that can be modeled by substitution.  On the other hand,
            normal-order evaluation can be an extremely valuable tool, and we will
            investigate some of its implications in chapters 3 and 4.<FOOTNOTE>In
            chapter 3 we will introduce <EM>stream processing</EM>, which is a
	    way of handling apparently <QUOTE>infinite</QUOTE> data structures
	    by incorporating a limited form of normal-order evaluation.  In
            section <REF NAME="sec:lazy-evaluation"/> we will modify the
	    <SPLITINLINE><SCHEME>Scheme</SCHEME>
	    <JAVASCRIPT>JavaScript</JAVASCRIPT>
	    </SPLITINLINE>
            interpreter to produce a normal-order variant of
	    <SPLITINLINE><SCHEME>Scheme.</SCHEME>
	    <JAVASCRIPT>JavaScript.</JAVASCRIPT>
	    </SPLITINLINE>
	  </FOOTNOTE>
            <INDEX>substitution model of procedure application</INDEX>
	</TEXT>
      </SUBSECTION>
