      <SUBSECTION>
        <LABEL NAME="sec:compound-procedures"></LABEL>
        <NAME>
          <SPLITINLINE><SCHEME>Compound Procedures</SCHEME><JAVASCRIPT>Functions</JAVASCRIPT></SPLITINLINE>
        </NAME>

            <TEXT>
              We have identified in 
              <SPLITINLINE><SCHEME>Lisp</SCHEME><JAVASCRIPT>JavaScript</JAVASCRIPT></SPLITINLINE>
              some of the elements that must appear in
              any powerful programming language:
              <UL>
                <LI>
                  Numbers and arithmetic operations are 
                  primitive data and 
              <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>.
                </LI>
                <LI>
                  Nesting of combinations provides a means of 
                  combining operations.
                </LI>
                <LI>
                  Constant declarations that associate names with values provide a
                  limited means of abstraction.
                </LI>
              </UL>
            </TEXT>

        <SPLIT>
          <SCHEME>
            <TEXT>
              Now we will learn about
              <INDEX>procedure<SUBINDEX>definition of</SUBINDEX></INDEX>
              <EM>procedure definitions</EM>, a much more powerful abstraction
              technique by which a compound operation can be given a name and then
              referred to as a unit.
            </TEXT>
            <TEXT>
              We begin by examining how to express the idea of <QUOTE>squaring.</QUOTE>  We
              might say, <QUOTE>To square something, multiply it by itself.</QUOTE>  This is
              expressed in our language as 
              <INDEX>
		<JAVASCRIPTINLINE>square</JAVASCRIPTINLINE>
		<ORDER>square</ORDER>
		</INDEX>
              <SNIPPET>
                <NAME>square_definition</NAME>
                <EXAMPLE>square_example</EXAMPLE>
                <SCHEME>
		  (define (square x) (* x x))
                </SCHEME>
              </SNIPPET>
              <SNIPPET HIDE="yes">
                <NAME>square_example</NAME>
                <SCHEME>
		  (square 14)
                </SCHEME>
              </SNIPPET>
              We can understand this in the following way:
              <SNIPPET EVAL="no">
                <SCHEME>
		  (define (square x)  (*     x   x))
		  ^$\ \ \ \uparrow\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \uparrow\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \uparrow\ \ \ \ \ \ \ \ \ \uparrow\ \ \ \ \ \ \ \ \ \ \ \ \ \uparrow\ \ \ \ \ \ \ \ \uparrow$^
		  ^To^    ^square something,^ ^multiply^ ^it^ ^by itself.^
                </SCHEME>
              </SNIPPET>
              <INDEX>compound procedure</INDEX>
              <INDEX>procedure<SUBINDEX>compound</SUBINDEX></INDEX>
              We have here a <EM>compound procedure</EM>, which has been given the name
              <SCHEMEINLINE>square</SCHEMEINLINE>.  
              The procedure represents the operation of multiplying
              something by itself.  The thing to be multiplied is given a local
              name, <SCHEMEINLINE>x</SCHEMEINLINE>, 
              which plays the same role that a pronoun plays in
              natural language.
              <INDEX>naming<SUBINDEX>of procedures</SUBINDEX></INDEX>
              <INDEX>procedure<SUBINDEX>naming (with <TT>define</TT>)</SUBINDEX></INDEX>
              <INDEX>procedure<SUBINDEX>creating with <TT>define</TT></SUBINDEX></INDEX>
              Evaluating the definition creates this
              compound procedure and associates it with the <NOBR>name 
              <SCHEMEINLINE>square</SCHEMEINLINE>.</NOBR><FOOTNOTE>Observe 
              that there are two different operations
              being combined here: we are creating the procedure, and we are giving
              it the name <SCHEMEINLINE>square</SCHEMEINLINE>.  
              It is possible, indeed important, to be
              able to separate these two notions<EMDASH/>to create procedures without
              naming them, and to give names to procedures that have already been
              created.  We will see how to do this in section <REF NAME="sec:lambda"/>.</FOOTNOTE>

              <!-- \indsf*{define}[procedures@for procedures] 
                   \ind*{special forms (those marked <EM>ns</EM> are not in the IEEE Scheme standard)}[define@{\tt define}]
              -->
            </TEXT>
          </SCHEME>
          <JAVASCRIPT>
            <TEXT>
              Now we will learn about
              <INDEX>function<SUBINDEX>declaration of</SUBINDEX></INDEX>
              <EM>function declarations</EM>, a much more powerful abstraction
              technique by which a compound operation can be given a name and then
              referred to as a unit.
            </TEXT>
            <TEXT>
              We begin by examining how to express the idea of <QUOTE>squaring.</QUOTE>  We
              might say, <QUOTE>To square something, take it times itself.</QUOTE>  This is
              expressed in our language as 
              <INDEX>
		<JAVASCRIPTINLINE>square</JAVASCRIPTINLINE>
		<ORDER>square</ORDER>
		</INDEX>
              <SNIPPET>
                <NAME>square_definition</NAME>
                <EXAMPLE>square_example</EXAMPLE>
                <JAVASCRIPT>
function square(x) {
    return x * x;
}
                </JAVASCRIPT>
              </SNIPPET>
              <SNIPPET HIDE="yes">
                <NAME>square_example</NAME>
                <JAVASCRIPT>
square(14);
                </JAVASCRIPT>
              </SNIPPET>
              We can understand this in the following way:
              <SNIPPET EVAL="no">
                <JAVASCRIPT>
function square(    x   ) { return x    *     x; }
//  ^       ^       ^         ^    ^    ^     ^
// To    square something,  take   it times itself.
		</JAVASCRIPT>
	      </SNIPPET>
              <INDEX>compound function</INDEX>
              <INDEX>function<SUBINDEX>compound</SUBINDEX></INDEX>
              We have here a <EM>compound function</EM>, which has been given the name
              <JAVASCRIPTINLINE>square</JAVASCRIPTINLINE>.  
              The function represents the operation of multiplying
              something by itself.  The thing to be multiplied is given a local
              name, <JAVASCRIPTINLINE>x</JAVASCRIPTINLINE>, 
              which plays the same role that a pronoun plays in
              natural language.
              <INDEX>naming<SUBINDEX>of functions</SUBINDEX></INDEX>
              <INDEX>function<SUBINDEX>naming (with <TT>define</TT>)</SUBINDEX></INDEX>
              <INDEX>function<SUBINDEX>creating with <TT>define</TT></SUBINDEX></INDEX>
              Evaluating the declaration creates this
              compound function and associates it with the <NOBR>name 
                <JAVASCRIPTINLINE>square</JAVASCRIPTINLINE>.</NOBR><FOOTNOTE>Observe 
                that there are two different operations
                being combined here: we are creating the function, and we are giving
                it the name <JAVASCRIPTINLINE>square</JAVASCRIPTINLINE>.  
                It is possible, indeed important, to be
                able to separate these two notions<EMDASH/>to create functions without
                naming them, and to give names to functions that have already been
                created.  We will see how to do this in section <REF NAME="sec:lambda"/>.</FOOTNOTE>

              <!-- \indsf*{define}[functions@for functions] 
                   \ind*{special forms (those marked <EM>ns</EM> are not in the IEEE Scheme standard)}[define@{\tt define}]
                -->
            </TEXT>
	  </JAVASCRIPT>
        </SPLIT>

        <SPLIT>
          <SCHEME>
            <TEXT>
              The general form of a procedure definition is
              <SNIPPET EVAL="no">
                <SCHEME>
(define (^$\langle \textit{name} \rangle$^ ^$\langle\textit{formal parameters}\rangle$^) ^$\langle \textit{body} \rangle$^)
                </SCHEME>
              </SNIPPET>
              <INDEX>name<SUBINDEX><ORDER>procedure</ORDER>of a procedure</SUBINDEX>
              </INDEX>
              <INDEX>procedure<SUBINDEX>name of</SUBINDEX></INDEX>
              The <LATEXINLINE>$\langle \textit{name}\rangle$</LATEXINLINE> 
              is a symbol to be associated with the procedure
              definition in the environment.<FOOTNOTE>Throughout this book, we will
                <INDEX>notation in this book
                  <SUBINDEX>italic symbols in expression syntax</SUBINDEX></INDEX>
                <INDEX>syntax
                  <SUBINDEX><ORDER>expressions</ORDER>of expressions, describing</SUBINDEX>
                </INDEX>
                describe the general syntax of expressions by using italic symbols
                delimited by angle brackets<EMDASH/>e.g., 
                <LATEXINLINE>$\langle \textit{name}\rangle$</LATEXINLINE><EMDASH/>to denote the
                <QUOTE>slots</QUOTE> in the expression to be filled in 
                when such an expression is actually used.</FOOTNOTE>
              The 
              <INDEX>procedure<SUBINDEX>formal parameters of</SUBINDEX></INDEX>
              <INDEX>formal parameters</INDEX>
              <LATEXINLINE>$\langle \textit{formal parameters}\rangle$</LATEXINLINE> are
              the names used within the body of the procedure to refer to the
              corresponding arguments of the procedure.  The
              <INDEX>procedure<SUBINDEX>body of</SUBINDEX></INDEX>
              <INDEX>body of a procedure</INDEX>
              <LATEXINLINE>$\langle \textit{body} \rangle$</LATEXINLINE> 
              is an expression that will yield the value of
              the procedure application when the formal parameters are replaced by
              the actual arguments to which the procedure is 
              applied.<FOOTNOTE>More
                <INDEX>\sequence of expressions<SUBINDEX>
                    <ORDER>procedures</ORDER>in procedure body</SUBINDEX>
                </INDEX>
                generally, the body of the procedure can be a sequence of expressions.
                In this case, the interpreter evaluates each expression in the
                sequence in turn and returns the value of the final expression as the
                value of the procedure application.
              </FOOTNOTE>
              The <LATEXINLINE>$\langle \textit{name} \rangle$</LATEXINLINE>
              and the <LATEXINLINE>$\langle \textit{formal parameters} \rangle$</LATEXINLINE>
              are grouped within 
              <INDEX>parentheses<SUBINDEX><ORDER>procedure</ORDER>in procedure definition
              </SUBINDEX></INDEX>
              parentheses, just as they
              would be in an actual call to the procedure being defined.
              <INDEX>procedure<SUBINDEX>definition of</SUBINDEX></INDEX>
            </TEXT>

            <TEXT>
              Having defined <SCHEMEINLINE>square</SCHEMEINLINE>, 
              we can now use it:
              <SNIPPET>
                <REQUIRES>square_definition</REQUIRES>
                <SCHEME>
(square 21)
                </SCHEME>
              </SNIPPET>

              <SNIPPET>
                <REQUIRES>square_definition</REQUIRES>
                <SCHEME>
(square (+ 2 5))
                </SCHEME>
              </SNIPPET>

              <SNIPPET>
                <REQUIRES>square_definition</REQUIRES>
                <SCHEME>
(square (square 3))
                </SCHEME>
              </SNIPPET>
            </TEXT>
          </SCHEME>
          <JAVASCRIPT>
            <TEXT>
              Our simplest form of a function declaration is
              <SNIPPET EVAL="no" LATEX="yes">
                <JAVASCRIPT>
function $\textit{name}$( $\textit{parameters}$ ) { return $\textit{expression}$; }
                </JAVASCRIPT>
              </SNIPPET>
              <INDEX>name<SUBINDEX><ORDER>function</ORDER>of a function</SUBINDEX>
              </INDEX>
              <INDEX>function<SUBINDEX>name of</SUBINDEX></INDEX>
              The <LATEXINLINE>$\textit{name}$</LATEXINLINE> 
              is a symbol to be associated with the function
              in the environment.<FOOTNOTE>Throughout this book, we will
                <INDEX>notation in this book
                  <SUBINDEX>italic symbols in expression syntax</SUBINDEX></INDEX>
                <INDEX>syntax
                  <SUBINDEX><ORDER>expressions</ORDER>of expressions, describing</SUBINDEX>
                </INDEX>
                describe the general syntax of programs by using italic symbols<EMDASH/>e.g., 
                <LATEXINLINE>$\textit{name}$</LATEXINLINE><EMDASH/>to denote the
                <QUOTE>slots</QUOTE> in the expression to be filled in 
                when such an expression is actually used.</FOOTNOTE>
              The 
              <INDEX>function<SUBINDEX>parameters of</SUBINDEX></INDEX>
              <INDEX>parameters</INDEX>
              <LATEXINLINE>$\textit{parameters}$</LATEXINLINE> are
              the names used within the body of the function to refer to the
              corresponding arguments of the function.  The
              <INDEX>function<SUBINDEX>body of</SUBINDEX></INDEX>
              <INDEX>body of a function</INDEX>
              <LATEXINLINE>$\textit{expression}$</LATEXINLINE> 
              after the keyword <JAVASCRIPTINLINE>return</JAVASCRIPTINLINE>
	      is the <EM>return expression</EM> that will yield the value of
              the function application when the parameters are replaced by
              the arguments to which the function is 
              applied.<FOOTNOTE>We shall see in the next section that
                <INDEX>sequence of expressions<SUBINDEX>
                    <ORDER>functions</ORDER>in function body</SUBINDEX>
                </INDEX>
                the body of the function can be a sequence of statements.
                In this case, the interpreter evaluates each statement in the
                sequence in turn until a return statement determines the
                value of the function application.
              </FOOTNOTE>
              The
	      <LATEXINLINE>$\textit{parameters}$</LATEXINLINE>
              are grouped within 
              <INDEX>parentheses<SUBINDEX><ORDER>function</ORDER>in function definition
              </SUBINDEX></INDEX>
              parentheses and separated by commas, just as they
              would be in an actual call to the function being declared.
              <INDEX>function<SUBINDEX>declaration of</SUBINDEX></INDEX>
            </TEXT>

            <TEXT>
              Having declared the <JAVASCRIPTINLINE>square</JAVASCRIPTINLINE> function, 
              we can now use it in a <EM>function application expression</EM>,
	      which we turn into a statement using a semicolon:
              <SNIPPET>
                <REQUIRES>square_definition</REQUIRES>
                <JAVASCRIPT>
square(21);
                </JAVASCRIPT>
              </SNIPPET>
	      The name <JAVASCRIPTINLINE>square</JAVASCRIPTINLINE> is
	      the <EM>function expression</EM> of the application,
	      and <JAVASCRIPTINLINE>21</JAVASCRIPTINLINE> is the
	      <EM>argument expression</EM>. 
              <SNIPPET>
                <REQUIRES>square_definition</REQUIRES>
                <JAVASCRIPT>
square(2 + 5);
                </JAVASCRIPT>
              </SNIPPET>
	      Here, the argument expression is itself a compound expression,
	      the operator expression <JAVASCRIPTINLINE>2 + 5</JAVASCRIPTINLINE>.
              <SNIPPET>
                <REQUIRES>square_definition</REQUIRES>
                <JAVASCRIPT>
square(square(3));
                </JAVASCRIPT>
              </SNIPPET>
	      Of course application expressions can also serve as argument
	      expressions.
            </TEXT>
          </JAVASCRIPT>
        </SPLIT>

        <SPLIT>
          <SCHEME>
            <TEXT>
              We can also use <SCHEMEINLINE>square</SCHEMEINLINE>
              as a building block in defining other
              procedures.  For example, <LATEXINLINE>$x^2 +y^2$</LATEXINLINE> 
              can be expressed as
              <SNIPPET EVAL="no">
                <SCHEME>
(+ (square x) (square y))
                </SCHEME>
              </SNIPPET>
            </TEXT>
          </SCHEME>
          <JAVASCRIPT>
            <TEXT>
              We can also use <JAVASCRIPTINLINE>square</JAVASCRIPTINLINE> 
              as a building block in declaring other
              functions.  For example, <LATEXINLINE>$x^2 +y^2$</LATEXINLINE> 
              can be expressed as 
              <SNIPPET EVAL="no">
                <JAVASCRIPT>
square(x) + square(y);
                </JAVASCRIPT>
              </SNIPPET>
            </TEXT>
          </JAVASCRIPT>
        </SPLIT>

        <SPLIT>
          <SCHEME>
            <TEXT>
              We can easily define a procedure
              <SCHEMEINLINE>sum-of-squares</SCHEMEINLINE>
              that, given any two numbers as arguments, produces the
              sum of their squares:
              <SNIPPET>
                <NAME>sum_of_squares</NAME>
                <REQUIRES>square_definition</REQUIRES>
                <SCHEME>
(define (sum-of-squares x y)
  (+ (square x) (square y)))

(sum-of-squares 3 4)
                </SCHEME>
                <SCHEMEOUTPUT>
25
                </SCHEMEOUTPUT>
              </SNIPPET>
              Now we can use <SCHEMEINLINE>sum-of-squares</SCHEMEINLINE> 
              as a building block in constructing further procedures:
              <SNIPPET>
                <NAME>f</NAME>
                <REQUIRES>sum_of_squares</REQUIRES>
                <SCHEME>
(define (f a)
  (sum-of-squares (+ a 1) (* a 2)))

(f 5)
                </SCHEME>
                <SCHEMEOUTPUT>
                  136
                </SCHEMEOUTPUT>
              </SNIPPET>

              <INDEX>compound procedure<SUBINDEX>used like primitive procedure</SUBINDEX>
              </INDEX>
              Compound procedures are used in exactly the same way as primitive
              procedures. Indeed, one could not tell by looking at the definition
              of <SCHEMEINLINE>sum-of-squares</SCHEMEINLINE> given above whether 
              <SCHEMEINLINE>square</SCHEMEINLINE> was built into
              the interpreter, like <SCHEMEINLINE>+</SCHEMEINLINE> and 
              <SCHEMEINLINE>*</SCHEMEINLINE>, 
              or defined as a compound procedure.
            </TEXT>
          </SCHEME>
          <JAVASCRIPT>
            <TEXT>
              We can easily declare a function
              <JAVASCRIPTINLINE>sum_of_squares</JAVASCRIPTINLINE>
              that, given any two numbers as arguments, produces the
              sum of their squares:
              <SNIPPET>
                <NAME>sum_of_squares</NAME>
                <EXAMPLE>sum_of_squares_example</EXAMPLE>
                <REQUIRES>square_definition</REQUIRES>
                <JAVASCRIPT>
function sum_of_squares(x,y) {
    return square(x) + square(y);
}
                </JAVASCRIPT>
              </SNIPPET>
              <SNIPPET HIDE="yes">
                <NAME>sum_of_squares_example</NAME>
                <JAVASCRIPT>
sum_of_squares(3,4);
                </JAVASCRIPT>
              </SNIPPET>
              Now we can use <JAVASCRIPTINLINE>sum_of_squares</JAVASCRIPTINLINE>
              as a building block in constructing further functions:
              <SNIPPET>
                <NAME>f</NAME>
                <EXAMPLE>f_example</EXAMPLE>
                <REQUIRES>sum_of_squares</REQUIRES>
                <JAVASCRIPT>
function f(a) {
    return sum_of_squares(a + 1, a * 2);
}
                </JAVASCRIPT>
              </SNIPPET>
              <SNIPPET HIDE="yes">
                <NAME>f_example</NAME>
                <JAVASCRIPT>
f(5);
              </JAVASCRIPT>
              </SNIPPET>
              <INDEX>compound procedure<SUBINDEX>used like primitive procedure</SUBINDEX>
              </INDEX>
              The application of functions such as
              <JAVASCRIPTINLINE>sum_of_squares(3,4)</JAVASCRIPTINLINE>
              is<EMDASH/>after operator combination<EMDASH/>the
	      second kind of combination
              of expressions into larger expressions that we encounter. 

	      In addition to compound functions, JavaScript provides a number of
	      <EM>primitive functions</EM> that are built into the interpreter.
	      An example is the function <JAVASCRIPTINLINE>math_log</JAVASCRIPTINLINE>
	      that computes the natural logarithm of its
	      argument.<FOOTNOTE>The Source language used in this adaptation introduces
	      names <JAVASCRIPTINLINE>math_*</JAVASCRIPTINLINE> for all functions and
	      constants in JavaScript's
	      <LINK address="https://www.ecma-international.org/ecma-262/9.0/index.html#sec-math-object">Math library</LINK>.
	      </FOOTNOTE>
	      Evaluating the application expression 
	      <JAVASCRIPTINLINE>math_log(1)</JAVASCRIPTINLINE> results in the number 0.

	      Primitive functions are used in exactly the same way as compound functions.
	      Indeed, one could not tell by looking at the definition
              of <JAVASCRIPTINLINE>sum_of_squares</JAVASCRIPTINLINE> given above whether 
              <JAVASCRIPTINLINE>square</JAVASCRIPTINLINE> was built into
              the interpreter, like <JAVASCRIPTINLINE>math_log</JAVASCRIPTINLINE>,
              or defined as a compound function.
	    </TEXT>
          </JAVASCRIPT>
        </SPLIT>
      </SUBSECTION>
