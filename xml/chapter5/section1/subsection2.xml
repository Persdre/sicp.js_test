    <SUBSECTION>
      <NAME>
  Abstraction in Machine Design
      </NAME>

      <INDEX>abstraction<SUBINDEX>register@in register-machine design|(</SUBINDEX></INDEX>

      <TEXT>
  We will often define a machine to include <QUOTE>primitive</QUOTE> operations that are
  actually very complex.  For example, in sections<SPACE/><REF NAME="sec:eceval"/> and
  <REF NAME="sec:compilation"/> we will treat <SPLITINLINE><SCHEME>Scheme</SCHEME><JAVASCRIPT>JavaScript</JAVASCRIPT></SPLITINLINE><APOS/>s environment
  manipulations as primitive.  Such abstraction is valuable because it
  allows us to ignore the details of parts of a machine so that we can
  concentrate on other aspects of the design.  The fact that we have
  swept a lot of complexity under the rug, however, does not mean that a
  machine design is unrealistic.  We can always replace the complex
  <QUOTE>primitives</QUOTE> by simpler primitive operations.
      </TEXT>

      <TEXT>
  Consider the GCD machine. The machine has an instruction that computes
  the remainder of the contents of registers <SCHEMEINLINE>a</SCHEMEINLINE> and <SCHEMEINLINE>b</SCHEMEINLINE> and
  assigns the result to register <SCHEMEINLINE>t</SCHEMEINLINE>.  If we want to construct the
  GCD machine without using a primitive remainder operation,
  we must specify how to compute remainders in terms of simpler
  operations, such as subtraction.  Indeed, we can write a 
  <SPLITINLINE><SCHEME>Scheme procedure</SCHEME><JAVASCRIPT>JavaScript function</JAVASCRIPT></SPLITINLINE>
  that finds remainders in this way:

  <SNIPPET>
    <SCHEME>
      (define (remainder n d)
      (if (&lt; n d)
      n
      (remainder (- n d) d)))
    </SCHEME>
    <JAVASCRIPT>
function remainder(n, d) {
    return n &lt; d
        ? n
        : remainder(n - d, d);
}
    </JAVASCRIPT>
  </SNIPPET>
      </TEXT>

      <TEXT>
  We can thus replace the remainder operation in the GCD machine<APOS/>s
  data paths with a subtraction operation and a comparison test.
  Figure<SPACE/><REF NAME="fig:gcd-machine-rem"/> shows the data paths and controller
  for the elaborated machine.
  The instruction

  <FIGURE>
    <FIGURE src="img_original/Fig5.5b.std.svg"/>
    <LABEL NAME="fig:gcd-machine-rem"/>
    <CAPTION>Data paths and controller for the elaborated GCD  machine.</CAPTION>
  </FIGURE>

  <SNIPPET EVAL="no">
    <SCHEME>
      (assign t (op rem) (reg a) (reg b))
    </SCHEME>
    <JAVASCRIPT>
assign("t", list(op("rem"), reg("a"), reg("b")))
    </JAVASCRIPT>
  </SNIPPET>

  in the GCD controller definition is replaced by a sequence of
  instructions that contains a loop, as shown in
  figure<SPACE/><REF NAME="fig:gcd-machine-rem-controller"/>.

  <FIGURE>
  <SNIPPET EVAL="no">
    <!-- 
        %(registers a b t)
        %(operations &lt; - =)
      -->
    <SCHEME>
      (controller
      test-b
      (test (op =) (reg b) (const 0))
      (branch (label gcd-done))
      (assign t (reg a))
      rem-loop
      (test (op &lt;) (reg t) (reg b))
      (branch (label rem-done))
      (assign t (op -) (reg t) (reg b))
      (goto (label rem-loop))
      rem-done
      (assign a (reg b))
      (assign b (reg t))
      (goto (label test-b))
      gcd-done)
    </SCHEME>
    <JAVASCRIPT>
controller(
    "test-b",
    list(test(list(op("="), reg("b"), constant(0))),
         branch(label("gcd-done")),
         assign("t", reg("a")),
         "rem-loop",
         test(list((op "&lt;"), reg("t"), reg("b"))),
         branch(label("rem-done")),
         assign("t", list(op("-"), reg("t"), reg("b"))),
         go_to(label("rem-loop")),
         "rem-done",
         assign("a", reg("b")),
         assign("b", reg("t")),
         go_to(label("test-b"))),
    "gcd-done");
    </JAVASCRIPT>
  </SNIPPET>
  <CAPTION>Controller instruction sequence for the GCD machine in
  figure<SPACE/><REF NAME="fig:gcd-machine-rem"/>.</CAPTION>
  <LABEL NAME="fig:gcd-machine-rem-controller"/>
        </FIGURE>
      </TEXT>

      <EXERCISE>
  <!--  \indcode{sqrt}[register machine for] -->
  Design a machine to compute square roots using Newton<APOS/>s method, as
  described in section<SPACE/><REF NAME="sec:sqrt"/>:

  <SNIPPET>
    <SCHEME>
      (define (sqrt x)
      (define (good-enough? guess)
      (&lt; (abs (- (square guess) x)) 0.001))
      (define (improve guess)
      (average guess (/ x guess)))
      (define (sqrt-iter guess)
      (if (good-enough? guess)
            guess
            (sqrt-iter (improve guess))))
      (sqrt-iter 1.0))
    </SCHEME>
    <JAVASCRIPT>
function sqrt(x) {
    function good_enough(guess, x) {
        return abs(square(guess) - x) &lt; 0.001;
    }
    function improve(guess, x) {
        return average(guess, x / guess);
    }
    function sqrt_iter(guess, x) {
        return good_enough(guess, x)
            ? guess
            : sqrt_iter(improve(guess, x), x);
    }
    return  sqrt_iter(1.0);
}
    </JAVASCRIPT>
  </SNIPPET>

  Begin by assuming that <SPLITINLINE><SCHEME><SCHEMEINLINE>good-enough?</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>good_enough</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> and <SCHEMEINLINE>improve</SCHEMEINLINE> operations
  are available as primitives.  Then show how to expand these in terms
  of arithmetic operations.  Describe each version of the <SCHEMEINLINE>sqrt</SCHEMEINLINE>
  machine design by drawing a data-path diagram and writing a controller
  definition in the register-machine language.
  <LABEL NAME="ex:sqrt-machine"/>
      </EXERCISE>
      <INDEX>abstraction<SUBINDEX>register@in register-machine design|)</SUBINDEX></INDEX>

    </SUBSECTION>
