    <SUBSECTION>
      <NAME>
  Instruction Summary
      </NAME>

      <LABEL NAME="sec:instruction-summary"/>
      <INDEX>register-machine language<SUBINDEX>instructions</SUBINDEX></INDEX>

      <TEXT>
  <INDEX>register-machine language<SUBINDEX>reg@<SCHEMEINLINE>reg</SCHEMEINLINE></SUBINDEX></INDEX>
  <INDEX>register-machine language<SUBINDEX>const@<SCHEMEINLINE>const</SCHEMEINLINE></SUBINDEX></INDEX>
  A controller instruction in our register-machine language
  has one of the following forms, where each
  <LATEXINLINE>$\textit{input}_i$</LATEXINLINE> is either <SPLITINLINE><SCHEME><SCHEMEINLINE>(reg ^register-name^)</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>reg(</JAVASCRIPTINLINE><LATEXINLINE>$\textit{register-name}$</LATEXINLINE><JAVASCRIPTINLINE>)</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
  or <SPLITINLINE><SCHEME><SCHEMEINLINE>(const ^constant-value^)</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>constant(</JAVASCRIPTINLINE><LATEXINLINE>$\textit{constant-value}$</LATEXINLINE><JAVASCRIPTINLINE>)</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>.
      </TEXT>

      <TEXT>
  These instructions were introduced in
  section<SPACE/><REF NAME="sec:register-machine-language"/>:
  <INDEX>register-machine language<SUBINDEX>assign@<SCHEMEINLINE>assign</SCHEMEINLINE></SUBINDEX></INDEX>
  <INDEX>register-machine language<SUBINDEX>op@<SCHEMEINLINE>op</SCHEMEINLINE></SUBINDEX></INDEX>
  <INDEX>register-machine language<SUBINDEX>perform@<SCHEMEINLINE>perform</SCHEMEINLINE></SUBINDEX></INDEX>
  <INDEX>register-machine language<SUBINDEX>test@<SCHEMEINLINE>test</SCHEMEINLINE></SUBINDEX></INDEX>
  <INDEX>register-machine language<SUBINDEX>branch@<SCHEMEINLINE>branch</SCHEMEINLINE></SUBINDEX></INDEX>
  <INDEX>register-machine language<SUBINDEX>label@<SCHEMEINLINE>label</SCHEMEINLINE></SUBINDEX></INDEX>
  <INDEX>register-machine language<SUBINDEX>goto@<SCHEMEINLINE>goto</SCHEMEINLINE></SUBINDEX></INDEX>
  <SNIPPET EVAL="no" LATEX="yes">
    <SCHEME>
      (assign ^register-name^ (reg ^register-name^))

      (assign ^register-name^ (const ^constant-value^))

      (assign ^register-name^ (op ^operation-name^) ^input$_{1}$^ ^$\ldots$^ ^input$_{n}$^)

      (perform (op ^operation-name^) ^input$_{1}$^ ^$\ldots$^ ^input$_{n}$^)

      (test (op ^operation-name^) ^input$_{1}$^ ^$\ldots$^ ^input$_{n}$^)

      (branch (label ^label-name^))

      (goto (label ^label-name^))
    </SCHEME>
    <JAVASCRIPT>
assign($\textit{register-name}$, reg($\textit{register-name}$))

assign($\textit{register-name}$, constant($\textit{constant-value}$))

assign($\textit{register-name}$, list(op($\textit{operation-name}$), $\textit{input}_{1}$, $\ldots$, $\textit{input}_{n}$))

perform(list(op($\textit{operation-name}$), $\textit{input}_{1}$, $\ldots$, $\textit{input}_{n}$))

test(list(op($\textit{operation-name}$), $\textit{input}_{1}$, $\ldots$, $\textit{input}_{n}$))

branch(label($\textit{label-name}$))

go_to(label($\textit{label-name}$))
    </JAVASCRIPT>
  </SNIPPET>
      </TEXT>

      <TEXT>
  The use of registers to hold labels was introduced in
  section<SPACE/><REF NAME="sec:subroutines"/>:
  <SNIPPET EVAL="no" LATEX="yes">
    <SCHEME>
      (assign ^register-name^ (label ^label-name^))

      (goto (reg ^register-name^))
    </SCHEME>
    <JAVASCRIPT>
assign($\textit{register-name}$, label($\textit{label-name}$))

go_to(reg($\textit{register-name}$))
    </JAVASCRIPT>
  </SNIPPET>
      </TEXT>

      <TEXT>
  Instructions to use the stack were introduced in
  section<SPACE/><REF NAME="sec:stack-recursion"/>:
  <INDEX>register-machine language<SUBINDEX>save@<SCHEMEINLINE>save</SCHEMEINLINE></SUBINDEX></INDEX>
  <INDEX>register-machine language<SUBINDEX>restore@<SCHEMEINLINE>restore</SCHEMEINLINE></SUBINDEX></INDEX>
  <SNIPPET EVAL="no" LATEX="yes">
    <SCHEME>
      (save ^register-name^)

      (restore ^register-name^)
    </SCHEME>
    <JAVASCRIPT>
save($\textit{register-name}$)

restore($\textit{register-name}$)
    </JAVASCRIPT>
  </SNIPPET>
      </TEXT>

      <TEXT>
  <INDEX>register-machine language<SUBINDEX>const@<SCHEMEINLINE>const</SCHEMEINLINE></SUBINDEX></INDEX>
  <!-- \indcodeplus{const}{(in register machine)}[syntax of]-->
  <INDEX>constant@constant, specifying in register machine</INDEX>
  The only kind of <LATEXINLINE>constant-value</LATEXINLINE> we have seen so far is a number,
  but later we will use strings, symbols, and lists.
  For example,
  <SPLITINLINE><SCHEME><SCHEMEINLINE>(const<SPACE/>"abc")</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>constant("abc")</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> is the string <SCHEMEINLINE>"abc"</SCHEMEINLINE>,
  <SPLITINLINE><SCHEME><SCHEMEINLINE>(const<SPACE/>abc)</SCHEMEINLINE> is the symbol <SCHEMEINLINE>abc</SCHEMEINLINE>,</SCHEME></SPLITINLINE>
  <SPLITINLINE><SCHEME><SCHEMEINLINE>(const<SPACE/>(a b c))</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>constant(list(a, b, c))</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> is the list <SPLITINLINE><SCHEME><SCHEMEINLINE>(a b c)</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>list(a, b, c)</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>,
  and <SPLITINLINE><SCHEME><SCHEMEINLINE>(const<SPACE/>())</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>constant(null)</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> is the empty list.
  <INDEX>register machine<SUBINDEX>design of|)</SUBINDEX></INDEX>
      </TEXT>

    </SUBSECTION>
